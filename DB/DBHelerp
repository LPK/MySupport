using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using System.Data.OleDb;
using System.Data;

namespace Vantage.BusinessLogicLayer
{
    public class DbHelper
    {
        public static string GetDateString(DateTime date)
        {
            return String.Format("'{0}'", date.Date.ToString("yyyy-MM-dd"));// MSSQL
            //return String.Format("TO_DATE({0},'YYYY-MM-DD')", date.Date.ToString("yyyy-MM-dd")); // Oracle
        }

        public static string GetDateTimeString(DateTime date)
        {
            return String.Format("'{0}'", date.ToString("yyyy-MM-dd HH:mm:ss"));// MSSQL
            //return String.Format("TO_DATE({0},'YYYY-MM-DD')", date.Date.ToString("yyyy-MM-dd")); // Oracle
        }

        public static void SetColumnsOrder(DataTable table, params String[] columnNames)
        {
            for (int columnIndex = 0; columnIndex < columnNames.Length; columnIndex++)
            {
                table.Columns[columnNames[columnIndex]].SetOrdinal(columnIndex);
            }           
        }

        //private const string
        public const string CONCAT = "+"; // SQL SERVER
        //public const string CONCAT = "||"; // Oracle

        // function
        public const string F_DATE = "GETDATE()"; // MSSQL

        // tables
        public const string T_Area = "Area";
        
        public const string T_Category = "Category";
        public const string T_Distributor = "Distributor";
        public const string T_Outlet = "Outlet";
        public const string T_OutletCategory = "OutletCategory";

        // columns
        public const string C_Description = "Description";
        public const string C_Depth = "Depth";
        public const string C_ID = "ID";
        public const string C_mpt_TypeEnum = "mpt_TypeEnum";
        public const string C_mpt_ItemTypeEnum = "mpt_ItemTypeEnum";
        public const string C_Name = "Name";
        public const string C_UID = "UID";

        public object GetScalarByUID(string tablename, string columnname, int uid)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                String commandString = String.Format("SELECT {0} FROM {1} WHERE UID = {2}", columnname, tablename, uid);
                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                object obj = command.ExecuteScalar();

                connection.Close();
                return obj;
            }
        }

        public object GetScalar(string cmdText)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                connection.Open();

                OleDbCommand command = new OleDbCommand(cmdText, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                object obj = command.ExecuteScalar();

                connection.Close();
                return obj;
            }
        }

        public DataSet GetDataSet(string cmdText)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                connection.Open();
                
                OleDbCommand command = new OleDbCommand(cmdText, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                return dataSet;
            }
        }

        public int ExecuteCommand(string commandText)
        {
            int rowsaffected = 0;

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                connection.Open();

                OleDbCommand command = new OleDbCommand(commandText, connection);
                rowsaffected = command.ExecuteNonQuery();

                connection.Close();
            }

            return rowsaffected;
        }

        public int ExecuteCommandList(List<string> commandTexts)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                OleDbCommand command = new OleDbCommand();
                //OleDbTransaction transaction = null;

                command.Connection = connection;

                try
                {
                    connection.Open();
                    //transaction = connection.BeginTransaction();

                    command.Connection = connection;
                    //command.Transaction = transaction;

                    foreach (string commandText in commandTexts)
                    {
                        command.CommandText = commandText;
                        command.ExecuteNonQuery();
                    }

                    //transaction.Commit();

                    connection.Close();
                }
                catch (Exception ex)
                {
                    try
                    {
                        // Attempt to roll back the transaction.
                        //transaction.Rollback();
                    }
                    catch
                    {
                        // Do nothing here; transaction is not active.
                    }
                    throw ex;
                }
            }
            return 0;
        }
        
    }
}
