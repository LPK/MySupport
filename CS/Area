using System;
using System.Data;
using System.Data.OleDb;
using System.Linq;
using Subgurim.Controles;
using System.Collections.Generic;
using System.Text;
using System.IO;
//using VantageUTIBA_API.UMarketSC;

namespace Vantage.BusinessLogicLayer
{
    public partial class AreaBL
    {
        public const TypeEnum LeafBusinessAreaLevel = TypeEnum.BusinessArea3;

        public enum TypeEnum
        {
            Null = 0,
            // Geo Areas
            Country = 1,
            Province = 2,
            District = 3,
            Town = 4,
            SubTown = 5,
            // Business Areas
            Company = 10,
            BusinessArea1 = 11, // Zone
            BusinessArea2 = 12, // Region
            BusinessArea3 = 13 // Territory
        }   
        

        public DataSet GetGeographicalAreaData_AR()
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string cmdText =
                    "SELECT UID, Description, ParentUID, ExpiryDate " +
                    "FROM Area " +
                    //"WITH(NOLOCK) " +
                    "WHERE mpt_TypeEnum IN (1,2,3,4,5) ";

                OleDbCommand command = new OleDbCommand(cmdText, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                return dataSet;
            }
        }

        public DataSet GetGeographicalAreaFlatData_AR()
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string cmdText =
                    "SELECT CO.Description AS Country, CH.Description AS Province, AR.Description AS District, TE.Description AS Town, STE.Description AS SubTown " +
                    "FROM Area CO " +
                    "INNER JOIN Area CH ON CO.UID = CH.ParentUID " +
                    "INNER JOIN Area AR ON CH.UID = AR.ParentUID " +
                    "INNER JOIN Area TE ON AR.UID = TE.ParentUID " +
                    "LEFT OUTER JOIN Area STE ON TE.UID = STE.ParentUID " +
                    "WHERE CO.mpt_TypeEnum = " + (short)TypeEnum.Country + " " +
                    "ORDER BY CH.Description, AR.Description, TE.Description, STE.Description";

                OleDbCommand command = new OleDbCommand(cmdText, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                return dataSet;
            }
        }

        public DataSet GetBusinessAreaData_AR()
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                    "SELECT UID, Description, ParentUID, ExpiryDate " +
                    "FROM Area " +
                    //"WITH(NOLOCK) " +
                    "WHERE mpt_TypeEnum IN (10,11,12,13)";

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                return dataSet;
            }
        }
        public DataSet GetBusinessAreaData_AR_Rpt(UserCredential credential)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                StringBuilder cmdBuilder = new StringBuilder();
                if (credential.DistributorUID.HasValue)
                {
                   cmdBuilder.Append(" SELECT A.UID, A.Description, A.ParentUID, A.ExpiryDate ");
                   cmdBuilder.Append(" FROM Area A");
                   cmdBuilder.Append(" INNER JOIN Distributor D ON A.UID = D.BusinessAreaUID ");
                   cmdBuilder.AppendFormat(" WHERE A.mpt_TypeEnum IN (10,11,12,13) AND A.ExpiryDate IS NULL AND D.UID ={0} ", credential.DistributorUID);
                      
                }
                else
                {
                    cmdBuilder.Append(" SELECT UID, Description, ParentUID, ExpiryDate ");
                    cmdBuilder.Append(" FROM Area ");
                    cmdBuilder.Append(" WHERE mpt_TypeEnum IN (10,11,12,13) AND ExpiryDate IS NULL ");
                }
                OleDbCommand command = new OleDbCommand(cmdBuilder.ToString(), connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                return dataSet;
            }
        }

        public DataSet GetBusinessAreaFlatData_AR()
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                    "SELECT CO.Description AS Company, CH.Description AS Bussiness, AR.Description AS Region, TE.Description AS Territory " +
                    "FROM Area CO " +
                    "INNER JOIN Area CH ON CO.UID = CH.ParentUID " +
                    "INNER JOIN Area AR ON CH.UID = AR.ParentUID " +
                    "INNER JOIN Area TE ON AR.UID = TE.ParentUID " +
                    "WHERE CO.mpt_TypeEnum = " + (short)TypeEnum.Company + " " +
                    "ORDER BY CH.Description, AR.Description";

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                return dataSet;
            }
        }

        public DataSet GetFlatBusinessTree()
        {
            string commandString =
                "SELECT TE.UID, CH.Description AS Zone, AR.Description AS Region, TE.Description AS Territory" +
                " FROM Area CO" +
                " INNER JOIN Area CH ON CO.UID = CH.ParentUID " +
                " INNER JOIN Area AR ON CH.UID = AR.ParentUID " +
                " INNER JOIN Area TE ON AR.UID = TE.ParentUID " +
                " WHERE CO.mpt_TypeEnum = " + (short)TypeEnum.Company + " " +
                " AND CO.ExpiryDate IS NULL" +
                " AND CH.ExpiryDate IS NULL" +
                " AND AR.ExpiryDate IS NULL" +
                " AND TE.ExpiryDate IS NULL" +
                " ORDER BY CH.Description, AR.Description";

            DataSet dataSet = new DbHelper().GetDataSet(commandString);

            DataColumn descColumn = new DataColumn("Description");
            descColumn.Expression = "Convert(Zone , 'System.String') + ' / ' + Convert(Region , 'System.String') + ' / ' + Convert(Territory , 'System.String')";
            dataSet.Tables["t"].Columns.Add(descColumn);

            return dataSet;
        }

        public DataSet GetProvince_AR()
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string cmdText =
                    "SELECT UID, Description " +
                    "FROM Area " +
                    "WHERE ExpiryDate IS NULL AND mpt_TypeEnum = " + (short)TypeEnum.Province +
                    " ORDER BY Description";
                connection.Open();

                OleDbCommand command = new OleDbCommand(cmdText, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                return dataSet;
            }
        }

        public DataSet GetDistricts_AR()
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string cmdText =
                    "SELECT UID, Description " +
                    "FROM Area " +
                    "WHERE ExpiryDate IS NULL AND mpt_TypeEnum = " + (short)TypeEnum.District + " " +
                    "ORDER BY Description";

                connection.Open();

                OleDbCommand command = new OleDbCommand(cmdText, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                return dataSet;
            }
        }

        public DataSet GetLeafBusinessAreasShortList_AR()
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string cmdText =
                    "SELECT UID, Description " +
                    "FROM Area " +
                    "WHERE ExpiryDate IS NULL AND mpt_TypeEnum = " + (short)TypeEnum.BusinessArea3 + " " +
                    "ORDER BY Description";

                connection.Open();

                OleDbCommand command = new OleDbCommand(cmdText, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                return dataSet;
            }
        }

        public DataSet GetByParent_AR(int parentUID)
        {
            if (parentUID < 1)
                return null;

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                    "SELECT UID, Description " +
                    "FROM Area " +
                    "WHERE ExpiryDate IS NULL AND ParentUID = " + parentUID;

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                return dataSet;
            }
        }

        public string Save_AR(
            int? uid,
            TypeEnum typeEnum,
            string description,
            int parentUID,
            UserCredential credential)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                OleDbCommand command = new OleDbCommand();
                OleDbTransaction transaction = null;

                command.Connection = connection;

                try
                {
                    connection.Open();
                    transaction = connection.BeginTransaction();

                    command.Connection = connection;
                    command.Transaction = transaction;

                    if (uid.HasValue)
                    {
                        command.CommandText = string.Format(
                                "UPDATE Area " +
                                "SET Description = ?, LastModifiedDate = {0}, LastModifiedBy = ? " +
                                "WHERE UID = ?", DbHelper.F_DATE);

                        command.Parameters.AddWithValue("@Description", description);
                        command.Parameters.AddWithValue("@LastModifiedBy", credential.Username);
                        command.Parameters.AddWithValue("@UID", uid);
                    }
                    else
                    {
                        command.CommandText = string.Format(
                            "INSERT INTO Area(mpt_TypeEnum, Description, ParentUID, LastModifiedBy, CreationDate ) " +
                            "VALUES (?, ?, ?, ?, {0})", DbHelper.F_DATE);

                        command.Parameters.AddWithValue("@mpt_TypeEnum", (int)typeEnum);
                        command.Parameters.AddWithValue("@Description", description);
                        command.Parameters.AddWithValue("@ParentUID", parentUID);
                        command.Parameters.AddWithValue("@LastModifiedBy", credential.Username);

                    }
                    // Execute the commands.
                    command.ExecuteNonQuery();
                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    //Console.WriteLine(ex.Message);
                    try
                    {
                        transaction.Rollback();
                    }
                    catch
                    {
                        // Do nothing here; transaction is not active.
                    }
                }
            }

            //using (VantageEntities db = new VantageEntities())
            //{
            //    Area area = null;

            //    if (uid.HasValue)
            //    {
            //        area = db.Areas.First(p => p.UID == uid);
            //        area.LastModifiedDate = DateTime.Now;
            //        area.Description = description;
            //        area.ParentUID = parentUID;
            //        area.LastModifiedBy = credential.Username;
            //    }
            //    else
            //    {
            //        // validate
            //        area = db.Areas.FirstOrDefault(p => 
            //            p.ParentUID == parentUID 
            //            && p.mpt_TypeEnum == (byte)typeEnum 
            //            && p.Description == description);

            //        if (area != null)
            //        {
            //            return description + " already exists!";
            //        }

            //        area = new Area();
            //        //area.ID = System.Guid.NewGuid().ToString("N").ToUpper();
            //        area.mpt_TypeEnum = (byte)typeEnum;
            //        area.Description = description;
            //        area.ParentUID = parentUID;
            //        area.LastModifiedBy = credential.Username;
            //        area.CreationDate = DateTime.Now;

            //        db.Areas.AddObject(area);
            //        db.SaveChanges();
            //    }

            //    db.SaveChanges();
            //}
            return string.Empty;
        }

        public void ToggleActivation_AR(int uid, UserCredential credential)
        {
            AreaBL.TypeEnum areaType = TypeEnum.Null;
            object obj = new DbHelper().GetScalarByUID(DbHelper.T_Area, DbHelper.C_mpt_TypeEnum, uid);
            if (obj != DBNull.Value)
                areaType = (AreaBL.TypeEnum)(short)obj;

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                OleDbCommand command = new OleDbCommand();
                OleDbTransaction transaction = null;

                // Set the Connection to the new OleDbConnection.
                command.Connection = connection;

                // Open the connection and execute the transaction. 
                try
                {
                    connection.Open();

                    // Start a local transaction
                    transaction = connection.BeginTransaction();

                    // Assign transaction object for a pending local transaction.
                    command.Connection = connection;
                    command.Transaction = transaction;

                    command.CommandText = string.Format(
                                "UPDATE Area " +
                                "SET ExpiryDate = CASE WHEN ExpiryDate IS NULL THEN {0} ELSE NULL END " +
                                "WHERE UID = {1}", DbHelper.F_DATE, uid);
                    command.ExecuteNonQuery();

                    if (areaType == TypeEnum.Town ||
                        areaType == TypeEnum.BusinessArea1 ||
                        areaType == TypeEnum.BusinessArea2)
                    {
                        command.CommandText = string.Format(
                            "UPDATE B " +
                            "SET ExpiryDate = CASE WHEN B.ExpiryDate IS NULL THEN {0} ELSE NULL END " +
                            "FROM Area A " +
                            "INNER JOIN Area B ON A.UID = B.ParentUID " +
                            "WHERE A.UID =  {1}", DbHelper.F_DATE, uid);
                        command.ExecuteNonQuery();

                        if (areaType == TypeEnum.BusinessArea1)
                        {
                            command.CommandText = string.Format(
                                "UPDATE C " +
                                "SET ExpiryDate = CASE WHEN C.ExpiryDate IS NULL THEN {0} ELSE NULL END " +
                                "FROM Area A " +
                                "INNER JOIN Area B ON A.UID = B.ParentUID " +
                                "INNER JOIN Area C ON B.UID = C.ParentUID " +
                                "WHERE A.UID =  {1}", DbHelper.F_DATE, uid);
                            command.ExecuteNonQuery();
                        }
                    }

                    // Commit the transaction.
                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    //Console.WriteLine(ex.Message);
                    try
                    {
                        // Attempt to roll back the transaction.
                        transaction.Rollback();
                    }
                    catch
                    {
                        // Do nothing here; transaction is not active.
                    }
                }
            }
        }

        #region AreaCordinates

        public List<location> GetCrdnts_ARCBusinessArea(int UID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {

                string commandString = String.Format(
                    "SELECT UID, AreaUID, SeqNumber, Latitude, Longitude " +
                    " FROM dbo.AreaCoordinate " +
                    " WHERE AreaUID ={0} " +             
                    " ORDER BY SeqNumber", UID);

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                List<location> points = new List<location>();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    location p = new location();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lon = Convert.ToDouble(r["Longitude"].ToString());
                    points.Add(p);
                }
                return points;
            }
        }
        public string Save_ARCBusinessArea(int UID, List<location> points, int ZoomLvl, string color, UserCredential credential)
        {
            if (points.Count == 0)
                return null;
           
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                OleDbCommand command = new OleDbCommand();
                // OleDbTransaction transaction = null;
                command.Connection = connection;
                try
                {
                    connection.Open();
                    command.Connection = connection;
                    command.CommandText = string.Format(
                           " DELETE FROM AreaCoordinate " +
                            "WHERE AreaUID = {0}", UID);

                    // Execute the commands.
                    command.ExecuteNonQuery();
                    int i = 0;
                    double sumLat = 0, sumLng = 0;
                    foreach (location p in points)
                    {
                        StringBuilder strBld = new StringBuilder("INSERT INTO AreaCoordinate(AreaUID, SeqNumber, Latitude, Longitude) ");
                        strBld.Append(" VALUES(?,?,?,?) ");

                        OleDbCommand sqlCod = new OleDbCommand(strBld.ToString(), connection);

                        sqlCod.Parameters.Add("@AreaUID", OleDbType.Integer);
                        sqlCod.Parameters["@AreaUID"].Value = UID;

                        sqlCod.Parameters.Add("SeqNumber", OleDbType.Integer);
                        sqlCod.Parameters["SeqNumber"].Value = i;

                        sqlCod.Parameters.Add("Latitude", OleDbType.Decimal);
                        sqlCod.Parameters["Latitude"].Value = p.lat;

                        sqlCod.Parameters.Add("Longitude", OleDbType.Decimal);
                        sqlCod.Parameters["Longitude"].Value = p.lon;

                        sumLat += p.lat;
                        sumLng += p.lon;

                        i++;

                        // Execute the commands.
                        sqlCod.ExecuteNonQuery();
                    }
                    command.CommandText = string.Format(
                                                "UPDATE Area " +
                                                "SET ZoomLvl ={0}, MidLat ={1}, MidLng ={2}, Color ='{3}' " +
                                                "WHERE     (UID = {4})", ZoomLvl, sumLat / i, sumLng / i, color, UID);
                    command.ExecuteNonQuery();

                }
                catch (Exception ex)
                {

                }
            }
            return string.Empty;
        }

        public string Save_ARC(int UID, List<GLatLng> points, int ZoomLvl, string color, UserCredential credential)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                OleDbCommand command = new OleDbCommand();
                OleDbTransaction transaction = null;

                command.Connection = connection;

                try
                {
                    connection.Open();
                    transaction = connection.BeginTransaction();

                    command.Connection = connection;
                    command.Transaction = transaction;

                    command.CommandText = string.Format(
                           " DELETE FROM AreaCoordinate " +
                            "WHERE AreaUID = {0}", UID);
                    //command.Parameters.AddWithValue("@AreaUID", UID);
                    // Execute the commands.
                    command.ExecuteNonQuery();
                    int i = 0;
                    double sumLat = 0, sumLng = 0;
                    foreach (GLatLng p in points)
                    {
                        command.CommandText = string.Format(
                            "INSERT INTO AreaCoordinate(AreaUID, SeqNumber, Latitude, Longitude) " +
                            "VALUES     ({0}, {1}, {2}, {3})", UID, i, p.lat, p.lng);

                        sumLat += p.lat;
                        sumLng += p.lng;
                        //command.Parameters.AddWithValue("@AreaUID", UID);
                        //command.Parameters.AddWithValue("@SeqNumber", i);
                        //command.Parameters.AddWithValue("@Latitude", p.lat);
                        //command.Parameters.AddWithValue("@Longitude", p.lng);

                        i++;

                        // Execute the commands.
                        command.ExecuteNonQuery();
                    }
                    command.CommandText = string.Format(
                                                "UPDATE    Area " +
                                                "SET ZoomLvl ={0}, MidLat ={1}, MidLng ={2}, Color ='{3}' " +
                                                "WHERE     (UID = {4})", ZoomLvl, sumLat / i, sumLng / i, color, UID);
                    command.ExecuteNonQuery();

                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    //Console.WriteLine(ex.Message);
                    try
                    {
                        transaction.Rollback();
                    }
                    catch
                    {
                        // Do nothing here; transaction is not active.
                    }
                }
            }
            return string.Empty;
        }

        public DataSet GetGeographicalAreaData_ARC()
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string cmdText =
                    "SELECT UID , Description, ParentUID, Color,mpt_TypeEnum " +
                    "FROM Area " +
                    //"WITH(NOLOCK) " +
                    "WHERE mpt_TypeEnum IN (1,2,3,4,5) ";

                OleDbCommand command = new OleDbCommand(cmdText, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                //   DataColumn keyColumn = new DataColumn("Key");
                ////   keyColumn.Expression = "Convert(UID , 'System.String') + '|' + Convert(mpt_TypeEnum , 'System.String')";
                //   dataSet.Tables["t"].Columns.Add(keyColumn);

                return dataSet;
            }
        }

        public DataSet GetBusinessAreaData_ARC()
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string cmdText =
                    "SELECT UID , Description, ParentUID, Color,mpt_TypeEnum " +
                    "FROM Area " +
                    //"WITH(NOLOCK) " +
                    "WHERE mpt_TypeEnum IN (10,11,12,13) AND ExpiryDate IS NULL";

                OleDbCommand command = new OleDbCommand(cmdText, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                //   DataColumn keyColumn = new DataColumn("Key");
                ////   keyColumn.Expression = "Convert(UID , 'System.String') + '|' + Convert(mpt_TypeEnum , 'System.String')";
                //   dataSet.Tables["t"].Columns.Add(keyColumn);

                return dataSet;
            }
        }

        public DataSet GetChildArea_ARC(int? ParentUID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string pUID = "is null";
                if (ParentUID != null)
                    pUID = " = " + ParentUID.ToString();
                //string cmdText =
                //    "SELECT UID, Description, ISNULL(ParentUID,0) as ParentUID, Color " +
                //    "FROM Area " +
                //    //"WITH(NOLOCK) " +
                //    "WHERE ParentUID " + pUID;

                string cmdText = "SELECT     Area.UID, Area.Description, ISNULL(Area.ParentUID, 0) AS ParentUID, Area.Color, COUNT(childArea.ID) AS childCount " +
                        "FROM         Area LEFT OUTER JOIN " +
                        "Area AS childArea ON Area.UID = childArea.ParentUID " +
                        "GROUP BY Area.UID, Area.Description, Area.ParentUID, Area.Color " +
                        "HAVING      Area.ParentUID " + pUID;

                //string cmdText =
                //   "SELECT UID, Description, ISNULL(ParentUID,0) as ParentUID, Color " +
                //   "FROM Area " +
                //    //"WITH(NOLOCK) " +
                //   "WHERE mpt_TypeEnum IN (1,2,3,4,5) ";

                OleDbCommand command = new OleDbCommand(cmdText, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                //List<AreaData> list = new List<AreaData>();
                //foreach (DataRow r in dataSet.Tables[0].Rows)
                //{
                //    AreaData a = new AreaData();
                //    a.areaUID = Convert.ToInt32(r["UID"].ToString());
                //    a.Description = r["Description"].ToString();
                //    try
                //    {
                //        a.parentUID = Convert.ToInt32(r["ParentUID"].ToString());
                //    }
                //    catch { }
                //    a.color = r["Color"].ToString();

                //    list.Add(a);
                //}

                connection.Close();

                //return list;
                return dataSet;
            }
        }

        public List<GLatLng> GetCrdnts_ARC(int UID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                //string commandString =
                //    "SELECT UID, Description " +
                //    "FROM Area " +
                //    "WHERE ExpiryDate IS NULL AND ParentUID = " + parentUID;

                string commandString =
                    "SELECT     UID, AreaUID, SeqNumber, Latitude, Longitude " +
                    "FROM         dbo.AreaCoordinate " +
                    "WHERE     AreaUID = " + UID;

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                List<GLatLng> points = new List<GLatLng>();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    GLatLng p = new GLatLng();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lng = Convert.ToDouble(r["Longitude"].ToString());
                    points.Add(p);
                }

                return points;
            }
        }

        public List<location> GetCrdnts_Native(int UID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                //string commandString =
                //    "SELECT UID, Description " +
                //    "FROM Area " +
                //    "WHERE ExpiryDate IS NULL AND ParentUID = " + parentUID;

                string commandString =
                    "SELECT     UID, AreaUID, SeqNumber, Latitude, Longitude " +
                    "FROM         dbo.AreaCoordinate " +
                    "WHERE     AreaUID = " + UID;

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                List<location> points = new List<location>();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    location p = new location();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lon = Convert.ToDouble(r["Longitude"].ToString());
                    points.Add(p);
                }

                return points;
            }
        }

        public List<AreaData> GetChildAreasBusinessArea(int UID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                    "SELECT     AreaCoordinate.UID, AreaCoordinate.AreaUID, AreaCoordinate.SeqNumber, AreaCoordinate.Latitude, AreaCoordinate.Longitude, Area.Color " +
                    "FROM         AreaCoordinate INNER JOIN " +
                    "Area ON AreaCoordinate.AreaUID = Area.UID " +
                    "WHERE     (Area.ParentUID = " + UID + ") " +
                    "ORDER BY AreaCoordinate.AreaUID, AreaCoordinate.SeqNumber";
                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                List<AreaData> areaList = new List<AreaData>();
                AreaData area = new AreaData();
                List<location> locList = new List<location>();

                bool isfirst = true;
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    if (!isfirst && Convert.ToInt32(r["SeqNumber"].ToString()) == 0)
                    {
                        areaList.Add(area);
                        locList = new List<location>();
                        area = new AreaData();
                    }
                    isfirst = false;
                    
                    location p = new location();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lon = Convert.ToDouble(r["Longitude"].ToString());
                    locList.Add(p);
                    area.areaUID = Convert.ToInt32(r["AreaUID"].ToString());
                    area.color = r["Color"].ToString();
                    area.locations = locList;
                }
                if (!isfirst)
                    areaList.Add(area);
                return areaList;
            }
        }

        public AreaData GetCrdnts_BusinessUnits(int UID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
            
                string commandStringCrdts =
                    "SELECT     UID, AreaUID, SeqNumber, Latitude, Longitude " +
                    "FROM         dbo.AreaCoordinate " +
                    "WHERE     AreaUID = " + UID;

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandStringCrdts, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                AreaData area = new AreaData();
                List<GLatLng> points = new List<GLatLng>();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    GLatLng p = new GLatLng();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lng = Convert.ToDouble(r["Longitude"].ToString());
                    points.Add(p);
                }
                area.listCrdnts = points;
                //-----------------------------------------------------------------------------------------------------------
                string commandStringArea =String.Format(
                   " SELECT D.Name,D.TLDNumber,isnull(D.emp_OwnerUID,0)AS emp_OwnerUID " +
                   " FROM Distributor D" +
                   " WHERE D.BusinessAreaUID = {0}  AND D.ExpiryDate IS NULL ",UID);

                connection.Open();

                command = new OleDbCommand(commandStringArea, connection);
                dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSetArea = new DataSet();
                dataAdapter.Fill(dataSetArea, "t");

                connection.Close();             

                foreach (DataRow r in dataSetArea.Tables[0].Rows)
                {
                    area.Description = r["Name"].ToString();
                    area.Owner_UID = Convert.ToInt32(r["emp_OwnerUID"].ToString());
                    area.TLDNumber = r["TLDNumber"].ToString();
                }
             
                //-----------------------------------------------------------------------------------------------------------

                string commandStringAreaDetails = String.Format(
                " SELECT ISNULL(ZoomLvl,0) AS ZoomLvl,ISNULL(MidLat,0) as MidLat,  ISNULL(MidLng,0) as MidLng, Color " +
                " FROM  Area" +
                " WHERE UID = {0} AND mpt_TypeEnum = {1}", UID, (byte)AreaBL.TypeEnum.BusinessArea3);

                connection.Open();

                command = new OleDbCommand(commandStringAreaDetails, connection);
                dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSetAreaDetails = new DataSet();
                dataAdapter.Fill(dataSetAreaDetails,"t");

                connection.Close();
                
                foreach (DataRow r in dataSetAreaDetails.Tables[0].Rows)
                {
                    area.midPoint = new GLatLng();
                    area.zoomLvl = Convert.ToInt32(r["ZoomLvl"].ToString());
                    area.midPoint.lng = Convert.ToDouble(r["MidLng"]);
                    
                    area.midPoint.lat = Convert.ToDouble(r["MidLat"]);
                    
                    area.color = r["Color"].ToString();
                }
                return area;
            }
        }

        public AreaData GetZoomLvl_BusinessUnits(int UID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                    "SELECT     ZoomLvl, MidLat, MidLng, Color " +
                    "FROM         dbo.Area " +
                    "WHERE     UID = " + UID;

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                GLatLng p = new GLatLng();
                AreaData ad = new AreaData();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    try
                    {
                        p.lat = Convert.ToDouble(r["MidLat"].ToString());
                    }
                    catch
                    {
                        return null;
                    }
                    try
                    {
                        p.lng = Convert.ToDouble(r["MidLng"].ToString());
                    }
                    catch
                    {
                        return null;
                    }
                    try
                    {
                        ad.zoomLvl = Convert.ToInt32(r["ZoomLvl"].ToString());
                    }
                    catch
                    {
                        return null;
                    }
                    try
                    {
                        ad.color = r["Color"].ToString();
                    }
                    catch
                    {
                        return null;
                    }
                    ad.midPoint = p;
                    return ad;
                }

                return null;
            }
        }

        public AreaData GetZoomLvl_ARC(int UID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                    "SELECT     ZoomLvl, MidLat, MidLng, Color " +
                    "FROM         dbo.Area " +
                    "WHERE     UID = " + UID;

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                GLatLng p = new GLatLng();
                AreaData ad = new AreaData();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    try
                    {
                        p.lat = Convert.ToDouble(r["MidLat"].ToString());
                    }
                    catch
                    {
                        return null;
                    }
                    try
                    {
                        p.lng = Convert.ToDouble(r["MidLng"].ToString());
                    }
                    catch
                    {
                        return null;
                    }
                    try
                    {
                        ad.zoomLvl = Convert.ToInt32(r["ZoomLvl"].ToString());
                    }
                    catch
                    {
                        return null;
                    }
                    try
                    {
                        ad.color = r["Color"].ToString();
                    }
                    catch
                    {
                        return null;
                    }
                    ad.midPoint = p;
                    return ad;
                }

                return null;
            }
        }

        public List<AreaData> GetSameLevelAreas(int UID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                        "SELECT     AreaCoordinate.UID, AreaCoordinate.AreaUID, AreaCoordinate.SeqNumber, AreaCoordinate.Latitude, AreaCoordinate.Longitude, Area_2.Color " +
                        "FROM         Area INNER JOIN " +
                        "Area AS PrntArea ON Area.ParentUID = PrntArea.UID INNER JOIN " +
                        "Area AS Area_2 ON PrntArea.UID = Area_2.ParentUID INNER JOIN " +
                        "AreaCoordinate ON Area_2.UID = AreaCoordinate.AreaUID " +
                        "WHERE     (Area.UID = " + UID + ") AND (AreaCoordinate.AreaUID <> " + UID + ") " +
                        "ORDER BY AreaCoordinate.AreaUID, AreaCoordinate.SeqNumber";

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                //List<List<GLatLng>> list = new List<List<GLatLng>>();
                List<AreaData> list = new List<AreaData>();
                AreaData ad = new AreaData();
                List<GLatLng> points = new List<GLatLng>();
                bool isfirst = true;
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    if (!isfirst && Convert.ToInt32(r["SeqNumber"].ToString()) == 0)
                    {
                        list.Add(ad);
                        points = new List<GLatLng>();
                        ad = new AreaData();
                    }
                    isfirst = false;
                    GLatLng p = new GLatLng();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lng = Convert.ToDouble(r["Longitude"].ToString());
                    points.Add(p);
                    ad.areaUID = Convert.ToInt32(r["AreaUID"].ToString());
                    ad.color = r["Color"].ToString();
                    ad.listCrdnts = points;
                }
                if (!isfirst)
                    list.Add(ad);
                return list;
            }
        }

        public AreaData GetParentLevelAreas(int UID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                        "SELECT     AreaCoordinate.UID, AreaCoordinate.AreaUID, AreaCoordinate.SeqNumber, AreaCoordinate.Latitude, AreaCoordinate.Longitude, Area_1.Color " +
                        "FROM         AreaCoordinate INNER JOIN " +
                        "Area ON AreaCoordinate.AreaUID = Area.ParentUID INNER JOIN " +
                        "Area AS Area_1 ON Area.ParentUID = Area_1.UID " +
                        "WHERE     (Area.UID = " + UID + ")";

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                AreaData ad = new AreaData();
                List<GLatLng> points = new List<GLatLng>();
                bool hasData = false;
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    hasData = true;
                    GLatLng p = new GLatLng();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lng = Convert.ToDouble(r["Longitude"].ToString());
                    points.Add(p);
                    ad.areaUID = Convert.ToInt32(r["AreaUID"].ToString());
                    ad.color = r["Color"].ToString();
                }
                if (hasData)
                {
                    ad.listCrdnts = points;
                    return ad;
                }
                return null;
            }
        }

        public List<AreaData> GetChildAreas(int UID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                    "SELECT     AreaCoordinate.UID, AreaCoordinate.AreaUID, AreaCoordinate.SeqNumber, AreaCoordinate.Latitude, AreaCoordinate.Longitude, Area.Color " +
                    "FROM         AreaCoordinate INNER JOIN " +
                    "Area ON AreaCoordinate.AreaUID = Area.UID " +
                    "WHERE     (Area.ParentUID = " + UID + ") " +
                    "ORDER BY AreaCoordinate.AreaUID, AreaCoordinate.SeqNumber";
                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                //List<List<GLatLng>> list = new List<List<GLatLng>>();
                List<AreaData> list = new List<AreaData>();
                AreaData ad = new AreaData();
                List<GLatLng> points = new List<GLatLng>();
                bool isfirst = true;
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    if (!isfirst && Convert.ToInt32(r["SeqNumber"].ToString()) == 0)
                    {
                        list.Add(ad);
                        points = new List<GLatLng>();
                        ad = new AreaData();
                    }
                    isfirst = false;
                    GLatLng p = new GLatLng();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lng = Convert.ToDouble(r["Longitude"].ToString());
                    points.Add(p);
                    ad.areaUID = Convert.ToInt32(r["AreaUID"].ToString());
                    ad.color = r["Color"].ToString();
                    ad.listCrdnts = points;
                }
                if (!isfirst)
                    list.Add(ad);
                return list;
            }
        }

        public List<AreaData> GetAllAreas(int UID)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                    "SELECT     AreaCoordinate.UID, AreaCoordinate.AreaUID, AreaCoordinate.SeqNumber, AreaCoordinate.Latitude, AreaCoordinate.Longitude, Area.Color " +
                    "FROM         AreaCoordinate INNER JOIN " +
                    "Area ON AreaCoordinate.AreaUID = Area.UID " +
                    "WHERE     (Area.UID <> " + UID + ") " +
                    "ORDER BY AreaCoordinate.AreaUID, AreaCoordinate.SeqNumber";
                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                //List<List<GLatLng>> list = new List<List<GLatLng>>();
                List<AreaData> list = new List<AreaData>();
                AreaData ad = new AreaData();
                List<GLatLng> points = new List<GLatLng>();
                bool isfirst = true;
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    if (!isfirst && Convert.ToInt32(r["SeqNumber"].ToString()) == 0)
                    {
                        list.Add(ad);
                        points = new List<GLatLng>();
                        ad = new AreaData();
                    }
                    isfirst = false;
                    GLatLng p = new GLatLng();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lng = Convert.ToDouble(r["Longitude"].ToString());
                    points.Add(p);
                    ad.areaUID = Convert.ToInt32(r["AreaUID"].ToString());
                    ad.color = r["Color"].ToString();
                    ad.listCrdnts = points;
                }
                if (!isfirst)
                    list.Add(ad);
                return list;
            }
        }

        public List<OutletData> GetOutlets(int areaUID, string rptName)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                //string commandString =
                //        "SELECT     dbo.Outlet.UID AS OutletUID,  dbo.Outlet.Name, dbo.Outlet.Latitude, dbo.Outlet.Longitude " +
                //        "FROM         dbo.Outlet INNER JOIN " +
                //        "dbo.Area ON dbo.Outlet.AreaUID = dbo.Area.UID " +
                //        "WHERE     (dbo.Outlet.Latitude IS NOT NULL) AND (dbo.Outlet.Longitude IS NOT NULL) AND (dbo.Area.UID = " + areaUID + ")";
                //connection.Open();
                string commandString = "";
                if (rptName == "SimStatus")
                {
                    commandString =
                        "SELECT     dbo.Outlet.UID AS OutletUID, dbo.Outlet.Name, dbo.Outlet.Latitude, dbo.Outlet.Longitude, ISNULL(TSimS.SimCount, 0) AS SimCount " +
                        "FROM         dbo.Outlet INNER JOIN " +
                        "dbo.Area ON dbo.Outlet.AreaUID = dbo.Area.UID LEFT OUTER JOIN " +
                            "(SELECT     OutletUID, COUNT(*) AS SimCount " +
                              "FROM          dbo.TxnSimStatus " +
                              "GROUP BY OutletUID) AS TSimS ON dbo.Outlet.UID = TSimS.OutletUID " +
                        "WHERE     (dbo.Area.UID = " + areaUID + ") " +
                        "GROUP BY dbo.Outlet.UID, dbo.Outlet.Name, dbo.Outlet.Latitude, dbo.Outlet.Longitude, ISNULL(TSimS.SimCount, 0) " +
                        "HAVING      (dbo.Outlet.Latitude IS NOT NULL) AND (dbo.Outlet.Longitude IS NOT NULL)";
                }
                else if (rptName == "CardStatus")
                {
                    commandString =
                        "SELECT     dbo.Outlet.UID AS OutletUID, dbo.Outlet.Name, dbo.Outlet.Latitude, dbo.Outlet.Longitude, ISNULL(TCardS.CardCount, 0) AS CardCount " +
                        "FROM         dbo.Outlet INNER JOIN " +
                        "dbo.Area ON dbo.Outlet.AreaUID = dbo.Area.UID LEFT OUTER JOIN " +
                            "(SELECT     OutletUID, COUNT(*) AS CardCount " +
                              "FROM          dbo.VoucherExt " +
                              "GROUP BY OutletUID) AS TCardS ON dbo.Outlet.UID = TCardS.OutletUID " +
                        "WHERE     (dbo.Area.UID = " + areaUID + ") " +
                        "GROUP BY dbo.Outlet.UID, dbo.Outlet.Name, dbo.Outlet.Latitude, dbo.Outlet.Longitude, ISNULL(TCardS.CardCount, 0) " +
                        "HAVING      (dbo.Outlet.Latitude IS NOT NULL) AND (dbo.Outlet.Longitude IS NOT NULL)";
                }
                else if (rptName == "ReloadStatus")
                {
                    commandString =
                        "SELECT     dbo.Outlet.UID AS OutletUID, dbo.Outlet.Name, dbo.Outlet.Latitude, dbo.Outlet.Longitude, ISNULL(TReloadS.ReloadCount, 0) AS ReloadCount " +
                        "FROM         dbo.Outlet INNER JOIN " +
                        "dbo.Area ON dbo.Outlet.AreaUID = dbo.Area.UID LEFT OUTER JOIN " +
                            "(SELECT     OutletUID, COUNT(*) AS ReloadCount " +
                              "FROM          dbo.TxnReloadStatus " +
                              "GROUP BY OutletUID) AS TReloadS ON dbo.Outlet.UID = TReloadS.OutletUID " +
                        "WHERE     (dbo.Area.UID = " + areaUID + ") " +
                        "GROUP BY dbo.Outlet.UID, dbo.Outlet.Name, dbo.Outlet.Latitude, dbo.Outlet.Longitude, ISNULL(TReloadS.ReloadCount, 0) " +
                        "HAVING      (dbo.Outlet.Latitude IS NOT NULL) AND (dbo.Outlet.Longitude IS NOT NULL)";
                }

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                List<OutletData> list = new List<OutletData>();
                OutletData ot = new OutletData();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    ot.areaUID = areaUID;
                    ot.outletUID = Convert.ToInt32(r["OutletUID"].ToString());
                    ot.name = r["Name"].ToString();
                    GLatLng p = new GLatLng();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lng = Convert.ToDouble(r["Longitude"].ToString());
                    ot.point = p;
                    if (rptName == "SimStatus")
                        ot.simCount = Convert.ToInt32(r["SimCount"].ToString());
                    else if (rptName == "CardStatus")
                        ot.cardCount = Convert.ToInt32(r["CardCount"].ToString());
                    else if (rptName == "ReloadStatus")
                        ot.reloadCount = Convert.ToInt32(r["ReloadCount"].ToString());
                    list.Add(ot);
                    ot = new OutletData();
                }
                return list;
            }
        }
        
        // GISReportBussinessAreWise.aspx
        public List<OutletData> GetGISOutletsByBusinessArea(int areaUID, int areaLevel, int ItemCategory, UserCredential credential)
        {
            int? BussinessAreaUID = -1;
            int? RegionUID = -1;
            int? ZoneUID = -1;

            if (areaLevel == 0 && areaUID == 0)
                return null;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea1)
                ZoneUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea2)
                RegionUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea3)
                BussinessAreaUID = areaUID;

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                StringBuilder commandString = new StringBuilder("SELECT O.UID ");

                commandString.Append(",O.ID AS OutletID ,O.Name AS OutletName, O.TLRNumber AS TLRNumber, O.StreetAddress, ISNULL(O.Latitude,0) as Latitude, ISNULL(O.Longitude,0) as Longitude, O.Telephone1 AS Telephone ");
                commandString.Append(",DS.Name as Dealer ");
                commandString.Append(",CC.ScheduledStart as LastVisit ");
                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher || ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    commandString.Append(",CAST(ISNULL(MOI.BalanceQtyValue,0) AS DECIMAL(18,2)) AS BalanceQty ");
                else
                    commandString.Append(",CAST(ISNULL(MOI.BalanceQty,0) AS INT) AS BalanceQty ");

                commandString.Append(",AG.TLSNumber AS DSRNumber ");
                commandString.Append(",OperationalDistrict = BU.Description ");
                commandString.Append(",ISNULL(OROL.FinalValue,0) as Reorder_Level");

                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                {
                    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN MOI.BalanceQtyValue < OROL.FinalValue THEN 1 WHEN MOI.BalanceQtyValue > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                }
                else
                {
                    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN MOI.BalanceQty < OROL.FinalValue THEN 1 WHEN MOI.BalanceQty > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                }

                commandString.Append("FROM Outlet O ");
                commandString.AppendFormat("LEFT OUTER JOIN OutletROL OROL ON O.UID = OROL.OutletUID AND OROL.Month = CAST(Convert(VARCHAR(7),GETDATE(),120) + '-01' AS DATETIME) AND OROL.ItemTypeEnum = {0} ", ItemCategory);
                commandString.AppendFormat("LEFT OUTER JOIN OutletItemCategory MOI WITH(NOLOCK) ON O.UID = MOI.OutletUID AND MOI.mpt_ItemTypeEnum ={0}  ", ItemCategory);
                

                commandString.Append("LEFT OUTER JOIN ( ");
	            commandString.Append("   SELECT C.OutletUID,C.ScheduledStart" );
	            commandString.Append("   FROM Call C ");
	            commandString.Append("    INNER JOIN ( ");
		        commandString.Append("       SELECT C.OutletUID,MAX(C.ScheduledStart) as MAX_CallDate ");
		        commandString.Append("        FROM Call C ");
		        commandString.Append("       GROUP BY C.OutletUID ");
		        commandString.Append("       )KK ON C.ScheduledStart = KK.MAX_CallDate AND C.OutletUID = KK.OutletUID ");
                commandString.Append(" )CC ON O.UID = CC.OutletUID ");

                commandString.Append("INNER JOIN DistributorOutlet DO ON O.UID = DO.OutletUID  ");
                commandString.Append("INNER JOIN Distributor DS ON DO.DistributorUID = DS.UID ");
                commandString.Append("INNER JOIN AgentOutlet AO ON O.UID = AO.OutletUID ");
                commandString.Append("INNER JOIN Agent AG ON AO.AgentUID = AG.UID ");

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager || credential.Designation == EmployeeBL.DesignationEnum.SalesManager
                                    || credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager || credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner
                                    || credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                {
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON DWN.ParentUID = FSC.UID AND FSC.mpt_DesignationEnum = 16 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                }

                else if (credential.Designation == EmployeeBL.DesignationEnum.SalesExecutive)
                {
                    commandString.Append("INNER JOIN Agent SE ON AG.ParentUID = SE.UID AND SE.mpt_DesignationEnum = 76 AND SE.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON SE.EmployeeUID = FSC.UID AND FSC.mpt_DesignationEnum = 76 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                }

                commandString.Append("LEFT OUTER JOIN Area BU ON DS.BusinessAreaUID = BU.UID ");
                commandString.Append("LEFT OUTER JOIN Area BR ON BU.ParentUID = BR.UID ");
                commandString.Append("LEFT OUTER JOIN Area BZ ON BR.ParentUID = BZ.UID ");
                commandString.Append("WHERE O.ExpiryDate IS NULL AND ISNULL(AG.mpt_TypeEnum,0) <> 1 AND ISNULL(DS.mpt_TypeEnum,0) <> 1 AND AG.ExpiryDate IS NULL AND DO.ExpiryDate IS NULL AND AO.ExpiryDate IS NULL AND OROL.FinalValue > 0 AND DS.ExpiryDate IS NULL ");
                //commandString.Append("AND (O.Latitude > 0 AND O.Longitude > 0) ");

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                    commandString.AppendFormat("AND DS.UID = {0} ", credential.DistributorUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager)
                    commandString.AppendFormat("AND ASM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager)
                    commandString.AppendFormat("AND SM.ParentUID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SalesManager)
                    commandString.AppendFormat("AND SM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.SalesExecutive)
                    commandString.AppendFormat("AND FSC.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner)
                    commandString.AppendFormat("AND DWN.UID = {0} ", credential.EmployeeUID);

                if (BussinessAreaUID > 0)
                    commandString.Append(" AND BU.UID = " + BussinessAreaUID);
                else if (RegionUID > 0)
                    commandString.Append(" AND BR.UID = " + RegionUID);
                else if (ZoneUID > 0)
                    commandString.Append(" AND BZ.UID = " + ZoneUID);

                if (ItemCategory == (int)ItemBL.TypeEnum.SIM || ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    commandString.Append(" AND O.mpt_TypeEnum = 1 ");
                

                OleDbCommand command = new OleDbCommand(commandString.ToString(), connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                List<OutletData> list = new List<OutletData>();
                OutletData ot = new OutletData();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    ot.areaUID = areaUID;
                    ot.outletUID = Convert.ToInt32(r["UID"].ToString());
                    ot.TLRNumber = r["TLRNumber"].ToString();
                    ot.name = r["OutletName"].ToString();
                    ot.Address = r["StreetAddress"].ToString();
                    ot.ID = r["OutletID"].ToString();
                    ot.curentbalance = Convert.ToDecimal(r["BalanceQty"].ToString());
                    ot.outletstatus = Convert.ToInt32(r["ReorderStatus"].ToString());
                    ot.reorder_Level = Convert.ToInt32(r["Reorder_Level"]);
                    ot.DealerName = r["Dealer"].ToString();
                    ot.Telephone1 = r["Telephone"].ToString();
                    ot.OperationalDistrict = r["OperationalDistrict"].ToString();
                    ot.DSRnumber = r["DSRNumber"].ToString();
                    ot.LastDSRVisit = r["LastVisit"].ToString();

                    GLatLng p = new GLatLng();
                    if (r["Latitude"].ToString() != "")
                        p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    if (r["Longitude"].ToString() != "")
                        p.lng = Convert.ToDouble(r["Longitude"].ToString());
                    ot.point = p;

                    list.Add(ot);
                    ot = new OutletData();
                }
                return list;
            }
        }

        public DataSet GetGISOutletsByBusinessArea_AR(int areaUID, int areaLevel, int ItemCategory, UserCredential credential) 
        {
            int? BussinessAreaUID = -1;
            int? RegionUID = -1;
            int? ZoneUID = -1;

            if (areaLevel == 0 && areaUID == 0)
                return null;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea1)
                ZoneUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea2)
                RegionUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea3)
                BussinessAreaUID = areaUID;

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                connection.Open();

                OleDbCommand command = new OleDbCommand("GISBusinessAreaStockOutReportDetail", connection);
                command.CommandType = CommandType.StoredProcedure;

                command.Parameters.AddWithValue("@AreaUID", areaUID);
                command.Parameters.AddWithValue("@AreaLevel", areaLevel);
                command.Parameters.AddWithValue("@ItemCategory", ItemCategory);
                command.Parameters.AddWithValue("@DistributorUID", credential.DistributorUID);
                command.Parameters.AddWithValue("@UserDesignationEnum", credential.Designation);
                command.Parameters.AddWithValue("@UserEmployeeUID", credential.EmployeeUID);

                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                return dataSet;
            }
        }

        public BusinessReportReturns GetGISOutletsByBusinessAreaPanel_AR(int areaUID, int areaLevel, int ItemCategory, UserCredential credential)
        {
            int? BussinessAreaUID = -1;
            int? RegionUID = -1;
            int? ZoneUID = -1;

            if (areaLevel == 0 && areaUID == 0)
                return null;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea1)
                ZoneUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea2)
                RegionUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea3)
                BussinessAreaUID = areaUID;

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                connection.Open();

                OleDbCommand command = new OleDbCommand("GISBusinessAreaStockOutReportDetailCountPanel", connection);
                command.CommandType = CommandType.StoredProcedure;

                command.Parameters.AddWithValue("@AreaUID", areaUID);
                command.Parameters.AddWithValue("@AreaLevel", areaLevel);
                command.Parameters.AddWithValue("@ItemCategory", ItemCategory);
                command.Parameters.AddWithValue("@DistributorUID", credential.DistributorUID);
                command.Parameters.AddWithValue("@UserDesignationEnum", credential.Designation);
                command.Parameters.AddWithValue("@UserEmployeeUID", credential.EmployeeUID);

                OleDbParameter outputOutletCount = command.Parameters.Add("@OutletCount", OleDbType.Integer);
                outputOutletCount.Direction = ParameterDirection.Output;

                OleDbParameter outputOutofStock = command.Parameters.Add("@OutletOutofStockCount", OleDbType.Integer);
                outputOutofStock.Direction = ParameterDirection.Output;

                OleDbParameter outputOutofStockPercentage = command.Parameters.Add("@OutletOutOfStockPercentage", OleDbType.Decimal);
                outputOutofStockPercentage.Direction = ParameterDirection.Output;
                
                command.ExecuteNonQuery();
                connection.Close();

                BusinessReportReturns dynRptinfo = new BusinessReportReturns();
                if (outputOutletCount.Value != null && outputOutofStock.Value != null && outputOutofStockPercentage.Value != null)
                {
                    dynRptinfo.OutputOutletCount = (int)outputOutletCount.Value;
                    dynRptinfo.OutputOutofStock = (int)outputOutofStock.Value;
                    dynRptinfo.OutputOutofStockPercentage = (decimal)outputOutofStockPercentage.Value ;
                }

                return dynRptinfo;
            }
        }

        public class BusinessReportReturns
        {
            public int OutputOutletCount { get; set; }
            public int OutputOutofStock { get; set; }
            public decimal OutputOutofStockPercentage { get; set; }
        }

        public DataSet GetGISOutletsByBusinessAreaBeta(int areaUID, int areaLevel, int ItemCategory, UserCredential credential)
        {
            int? BussinessAreaUID = -1;
            int? RegionUID = -1;
            int? ZoneUID = -1;

            if (areaLevel == 0 && areaUID == 0)
                return null;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea1)
                ZoneUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea2)
                RegionUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea3)
                BussinessAreaUID = areaUID;

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                StringBuilder commandString = new StringBuilder("SELECT O.UID ");
                commandString.Append(", ISNULL(O.Latitude,0) as Latitude, ISNULL(O.Longitude,0) as Longitude ");
                //commandString.Append(",O.ID AS OutletID ,O.Name AS OutletName, O.TLRNumber AS TLRNumber, O.StreetAddress, ISNULL(O.Latitude,0) as Latitude, ISNULL(O.Longitude,0) as Longitude, O.Telephone1 AS Telephone ");
                //commandString.Append(",DS.Name as Dealer ");

                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher || ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    commandString.Append(",CAST(ISNULL(KK.CurrentBalance,0) AS DECIMAL(18,2)) AS BalanceQty ");
                else
                    commandString.Append(",CAST(ISNULL(MOI.BalanceQty,0) AS INT) AS BalanceQty ");

                //commandString.Append(",AG.TLSNumber AS DSRNumber ");
                //commandString.Append(",OperationalDistrict = BU.Description ");
                commandString.Append(",ISNULL(OROL.FinalValue,0) as Reorder_Level ");

                //if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                //{
                //    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN KK.CurrentBalance < OROL.FinalValue THEN 1 WHEN KK.CurrentBalance > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                //}
                //else
                //{
                //    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN MOI.BalanceQty < OROL.FinalValue THEN 1 WHEN MOI.BalanceQty > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                //}

                commandString.Append("FROM Outlet O ");
                commandString.AppendFormat("LEFT OUTER JOIN OutletROL OROL ON O.UID = OROL.OutletUID AND OROL.Month = CAST(Convert(VARCHAR(7),GETDATE(),120) + '-01' AS DATETIME) AND OROL.ItemTypeEnum = {0} ", ItemCategory);

                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                {
                    commandString.Append("LEFT OUTER JOIN ( ");
                    commandString.Append("SELECT MO.OutletUID,SUM(MO.BalanceQty * IPL.UnitListPrice) AS CurrentBalance ");
                    commandString.Append("FROM OutletItem MO WITH(NOLOCK) ");
                    commandString.Append("INNER JOIN ItemPriceList IPL ON MO.ItemUID = IPL.ItemUID ");
                    commandString.Append("INNER JOIN Item I ON MO.ItemUID = I.UID ");
                    commandString.Append("WHERE  I.mpt_TypeEnum = 3 AND I.ExpiryDate IS NULL AND MO.mpt_TypeEnum = 2 AND IPL.IsActive = 1 AND IPL.PriceListUID = 27 ");
                    commandString.Append("GROUP BY MO.OutletUID ");
                    commandString.Append(")KK ON O.UID = KK.OutletUID ");
                }
                else
                {
                    commandString.AppendFormat("LEFT OUTER JOIN OutletItem MOI WITH(NOLOCK) ON O.UID = MOI.OutletUID AND MOI.mpt_TypeEnum = 1 AND MOI.ItemUID = {0} ", ItemCategory);
                }

                commandString.Append("INNER JOIN DistributorOutlet DO ON O.UID = DO.OutletUID  ");
                commandString.Append("INNER JOIN Distributor DS ON DO.DistributorUID = DS.UID ");
                commandString.Append("INNER JOIN AgentOutlet AO ON O.UID = AO.OutletUID ");
                commandString.Append("INNER JOIN Agent AG ON AO.AgentUID = AG.UID ");

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager || credential.Designation == EmployeeBL.DesignationEnum.SalesManager
                                    || credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager || credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner
                                    || credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                {
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON DWN.ParentUID = FSC.UID AND FSC.mpt_DesignationEnum = 16 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                }

                commandString.Append("LEFT OUTER JOIN Area BU ON DS.BusinessAreaUID = BU.UID ");
                commandString.Append("LEFT OUTER JOIN Area BR ON BU.ParentUID = BR.UID ");
                commandString.Append("LEFT OUTER JOIN Area BZ ON BR.ParentUID = BZ.UID ");
                commandString.Append("WHERE O.ExpiryDate IS NULL AND ISNULL(AG.mpt_TypeEnum,0) <> 1 AND ISNULL(DS.mpt_TypeEnum,0) <> 1 AND AG.ExpiryDate IS NULL AND DO.ExpiryDate IS NULL AND AO.ExpiryDate IS NULL AND OROL.FinalValue > 0 AND DS.ExpiryDate IS NULL ");
                //commandString.Append("AND (O.Latitude > 0 AND O.Longitude > 0) ");

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                    commandString.AppendFormat("AND DS.UID = {0} ", credential.DistributorUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager)
                    commandString.AppendFormat("AND ASM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager)
                    commandString.AppendFormat("AND SM.ParentUID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SalesManager)
                    commandString.AppendFormat("AND SM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator)
                    commandString.AppendFormat("AND FSC.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner)
                    commandString.AppendFormat("AND DWN.UID = {0} ", credential.EmployeeUID);

                if (BussinessAreaUID > 0)
                    commandString.Append(" AND BU.UID = " + BussinessAreaUID);
                else if (RegionUID > 0)
                    commandString.Append(" AND BR.UID = " + RegionUID);
                else if (ZoneUID > 0)
                    commandString.Append(" AND BZ.UID = " + ZoneUID);

                if (ItemCategory == (int)ItemBL.TypeEnum.SIM || ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    commandString.Append(" AND O.mpt_TypeEnum = 1 ");

                OleDbCommand command = new OleDbCommand(commandString.ToString(), connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                return dataSet;

                //List<OutletData> list = new List<OutletData>();
                //OutletData ot = new OutletData();
                //foreach (DataRow r in dataSet.Tables[0].Rows)
                //{
                //    ot.areaUID = areaUID;
                //    ot.outletUID = Convert.ToInt32(r["UID"].ToString());
                //    ot.TLRNumber = r["TLRNumber"].ToString();
                //    ot.name = r["OutletName"].ToString();
                //    ot.Address = r["StreetAddress"].ToString();
                //    ot.ID = r["OutletID"].ToString();
                //    ot.curentbalance = Convert.ToDecimal(r["BalanceQty"].ToString());
                //    ot.outletstatus = Convert.ToInt32(r["ReorderStatus"].ToString());
                //    ot.reorder_Level = Convert.ToInt32(r["Reorder_Level"]);
                //    ot.DealerName = r["Dealer"].ToString();
                //    ot.Telephone1 = r["Telephone"].ToString();
                //    ot.OperationalDistrict = r["OperationalDistrict"].ToString();
                //    ot.DSRnumber = r["DSRNumber"].ToString();

                //    GLatLng p = new GLatLng();
                //    if (r["Latitude"].ToString() != "")
                //        p.lat = Convert.ToDouble(r["Latitude"].ToString());
                //    if (r["Longitude"].ToString() != "")
                //        p.lng = Convert.ToDouble(r["Longitude"].ToString());
                //    ot.point = p;

                //    list.Add(ot);
                //    ot = new OutletData();
                //}
                //return list;
            }
        }

       
        public static void GenerateReportBusinessArea(int areaUID, int areaLevel, int ItemCategory, string filePath, UserCredential credential)
        {
            int? BussinessAreaUID = -1;
            int? RegionUID = -1;
            int? ZoneUID = -1;

            if (areaLevel == 0 && areaUID == 0)
                return ;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea1)
                ZoneUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea2)
                RegionUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea3)
                BussinessAreaUID = areaUID;

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                StringBuilder commandString = new StringBuilder("SELECT O.UID ");
                commandString.Append(",O.ID AS OutletID ");
                commandString.Append(",O.Name AS OutletName ");
                commandString.Append(",O.TLRNumber AS TLRNumber ");
                commandString.Append(",O.StreetAddress ");
                commandString.Append(",DS.Name as Dealer ");
                commandString.Append(",CASE WHEN ISNULL(O.TLRNumber,0) = 0 THEN CAST(O.ID AS varchar(50)) ELSE CAST(O.TLRNumber AS varchar(50)) END as RetailerID ");
                commandString.Append(",CC.ScheduledStart as LastVisit ");
                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher || ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    commandString.Append(",CAST(ISNULL(MOI.BalanceQtyValue,0) AS DECIMAL(18,2)) AS BalanceQty ");
                else
                    commandString.Append(",CAST(ISNULL(MOI.BalanceQty,0) AS INT) AS BalanceQty ");

                commandString.Append(",ISNULL(O.Latitude,0) as Latitude ");
                commandString.Append(",ISNULL(O.Longitude,0) as Longitude ");
                commandString.Append(",AG.TLSNumber AS DSRNumber ");
                commandString.Append(",OperationalDistrict = BU.Description ");
                commandString.Append(",O.Telephone1 AS Telephone ");
                commandString.Append(",ISNULL(OROL.FinalValue,0) as Reorder_Level");

                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                {
                    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN MOI.BalanceQtyValue < OROL.FinalValue THEN 1 WHEN MOI.BalanceQtyValue > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                    commandString.Append(",Status = ISNULL(CASE WHEN MOI.BalanceQtyValue < OROL.FinalValue THEN 'Below' WHEN MOI.BalanceQtyValue >= OROL.FinalValue THEN 'Above' WHEN ( MOI.BalanceQtyValue = 0 AND ISNULL(OROL.FinalValue,0)  = 0) THEN 'Below' ELSE '' END,0) ");
                }
                else
                {
                    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN MOI.BalanceQty < OROL.FinalValue THEN 1 WHEN MOI.BalanceQty > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                    commandString.Append(",Status = ISNULL(CASE WHEN MOI.BalanceQty < OROL.FinalValue THEN 'Below' WHEN MOI.BalanceQty >= OROL.FinalValue THEN 'Above' WHEN ( MOI.BalanceQty = 0 AND ISNULL(OROL.FinalValue,0)  = 0) THEN 'Below' ELSE '' END,0) ");
                }
                commandString.Append("FROM Outlet O ");
                commandString.AppendFormat("LEFT OUTER JOIN OutletROL OROL ON O.UID = OROL.OutletUID AND OROL.Month = CAST(Convert(VARCHAR(7),GETDATE(),120) + '-01' AS DATETIME) AND OROL.ItemTypeEnum = {0} ", ItemCategory);

                commandString.AppendFormat("LEFT OUTER JOIN OutletItemCategory MOI WITH(NOLOCK) ON O.UID = MOI.OutletUID AND MOI.mpt_ItemTypeEnum = {0} ", ItemCategory);

                commandString.Append("LEFT OUTER JOIN ( ");
                commandString.Append("   SELECT C.OutletUID,C.ScheduledStart");
                commandString.Append("   FROM Call C ");
                commandString.Append("    INNER JOIN ( ");
                commandString.Append("       SELECT C.OutletUID,MAX(C.ScheduledStart) as MAX_CallDate ");
                commandString.Append("        FROM Call C ");
                commandString.Append("       GROUP BY C.OutletUID ");
                commandString.Append("       )KK ON C.ScheduledStart = KK.MAX_CallDate AND C.OutletUID = KK.OutletUID ");
                commandString.Append(" )CC ON O.UID = CC.OutletUID ");

                commandString.Append("INNER JOIN DistributorOutlet DO ON O.UID = DO.OutletUID  ");
                commandString.Append("INNER JOIN Distributor DS ON DO.DistributorUID = DS.UID ");
                commandString.Append("INNER JOIN AgentOutlet AO ON O.UID = AO.OutletUID ");
                commandString.Append("INNER JOIN Agent AG ON AO.AgentUID = AG.UID ");

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager || credential.Designation == EmployeeBL.DesignationEnum.SalesManager
                                    || credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager || credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner
                                    || credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                {
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON DWN.ParentUID = FSC.UID AND FSC.mpt_DesignationEnum = 16 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                }

                else if (credential.Designation == EmployeeBL.DesignationEnum.SalesExecutive)
                {
                    commandString.Append("INNER JOIN Agent SE ON AG.ParentUID = SE.UID AND SE.mpt_DesignationEnum = 76 AND SE.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON SE.EmployeeUID = FSC.UID AND FSC.mpt_DesignationEnum = 76 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                }

                commandString.Append("LEFT OUTER JOIN Area BU ON DS.BusinessAreaUID = BU.UID ");
                commandString.Append("LEFT OUTER JOIN Area BR ON BU.ParentUID = BR.UID ");
                commandString.Append("LEFT OUTER JOIN Area BZ ON BR.ParentUID = BZ.UID ");
                commandString.AppendFormat("WHERE O.ExpiryDate IS NULL AND ISNULL(AG.mpt_TypeEnum,0) <> 1 AND ISNULL(DS.mpt_TypeEnum,0) <> 1 AND AG.ExpiryDate IS NULL AND DO.ExpiryDate IS NULL AND AO.ExpiryDate IS NULL AND OROL.FinalValue > 0 AND DS.ExpiryDate IS NULL ", ItemCategory);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                    commandString.AppendFormat("AND DS.UID = {0} ", credential.DistributorUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager)
                    commandString.AppendFormat("AND ASM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager)
                    commandString.AppendFormat("AND SM.ParentUID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SalesManager)
                    commandString.AppendFormat("AND SM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.SalesExecutive)
                    commandString.AppendFormat("AND FSC.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner)
                    commandString.AppendFormat("AND DWN.UID = {0} ", credential.EmployeeUID);

                if (BussinessAreaUID > 0)
                    commandString.Append(" AND BU.UID = " + BussinessAreaUID);
                else if (RegionUID > 0)
                    commandString.Append(" AND BR.UID = " + RegionUID);
                else if (ZoneUID > 0)
                    commandString.Append(" AND BZ.UID = " + ZoneUID);

                if (ItemCategory == (int)ItemBL.TypeEnum.SIM || ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    commandString.Append(" AND O.mpt_TypeEnum = 1 ");

                OleDbCommand command = new OleDbCommand(commandString.ToString(), connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                TextWriter tw = new StreamWriter(filePath);
                StringBuilder Header = new StringBuilder();
                StringBuilder contents = new StringBuilder();

                //header line
                Header.Append("Retailer Name,Retailer,Sandi Id,Retailer Address,Operational District,DSR Number,Dealer Name,Reorder Level,Balance,Status,DSR Last Visit");

                contents.Append(Header.ToString().TrimEnd(',') + "\r\n");

                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    string name = r["OutletName"].ToString();
                    string address = r["StreetAddress"].ToString();
                    if (name != null)
                        name = name.Replace(',', ' ');
                    if (address != null)
                    {
                        address = address.Replace(',', ' ');
                        address = address.Replace('\'', '-');                       
                    }
                    contents.Append(name + "," + r["TLRNumber"].ToString() + "," + r["OutletID"].ToString() + "," + address + "," + r["OperationalDistrict"].ToString() + "," + r["DSRNumber"].ToString() + "," + r["Dealer"].ToString() + "," + Convert.ToDecimal(r["Reorder_Level"]) + "," + Convert.ToDecimal(r["BalanceQty"].ToString()) + "," + r["Status"].ToString() + "," + r["LastVisit"].ToString() + "\r\n");
                }
                tw.Write(contents.ToString());
                tw.Flush();
                tw.Close();
            }

        }
        
        public static DataSet GISOutletsByBusinessArea(int areaUID, int areaLevel, int ItemCategory, UserCredential credential)
        {
            int? BussinessAreaUID = -1;
            int? RegionUID = -1;
            int? ZoneUID = -1;

            if (areaLevel == 0 && areaUID == 0)
                return null;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea1)
                ZoneUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea2)
                RegionUID = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.BusinessArea3)
                BussinessAreaUID = areaUID;
             
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                StringBuilder commandString = new StringBuilder("SELECT O.UID ");
                commandString.Append(",O.ID AS OutletID ");
                commandString.Append(",O.Name AS OutletName ");
                commandString.Append(",O.TLRNumber AS TLRNumber ");
                commandString.Append(",O.StreetAddress AS StreetAddress ");
                commandString.Append(",CASE WHEN ISNULL(O.TLRNumber,0) = 0 THEN CAST(O.ID AS varchar(50)) ELSE CAST(O.TLRNumber AS varchar(50)) END as RetailerID ");
                commandString.Append(",O.StreetAddress ");
                commandString.Append(",DS.Name as Dealer ");
                commandString.Append(",CC.ScheduledStart as LastVisit ");
                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher || ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    commandString.Append(",CAST(ISNULL(MOI.BalanceQtyValue,0) AS DECIMAL(18,2)) AS BalanceQty ");
                else
                    commandString.Append(",CAST(ISNULL(MOI.BalanceQty,0) AS INT) AS BalanceQty ");

                commandString.Append(",ISNULL(O.Latitude,0) as Latitude ");
                commandString.Append(",ISNULL(O.Longitude,0) as Longitude ");
                commandString.Append(",AG.TLSNumber AS DSRNumber ");
                commandString.Append(",OperationalDistrict = BU.Description ");
                commandString.Append(",O.Telephone1 AS Telephone ");
                commandString.Append(",ISNULL(OROL.FinalValue,0) as Reorder_Level");

                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                {
                    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN MOI.BalanceQtyValue < OROL.FinalValue THEN 1 WHEN MOI.BalanceQtyValue > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                    commandString.Append(",Status = ISNULL(CASE WHEN MOI.BalanceQtyValue < OROL.FinalValue THEN 'Below' WHEN MOI.BalanceQtyValue >= OROL.FinalValue THEN 'Above' WHEN ( MOI.BalanceQtyValue = 0 AND ISNULL(OROL.FinalValue,0)  = 0) THEN 'Below' ELSE '' END,0) ");
                }
                else
                {
                    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN MOI.BalanceQty < OROL.FinalValue THEN 1 WHEN MOI.BalanceQty > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                    commandString.Append(",Status = ISNULL(CASE WHEN MOI.BalanceQty < OROL.FinalValue THEN 'Below' WHEN MOI.BalanceQty >= OROL.FinalValue THEN 'Above' WHEN ( MOI.BalanceQty = 0 AND ISNULL(OROL.FinalValue,0)  = 0) THEN 'Below' ELSE '' END,0) ");
                }
                commandString.Append("FROM Outlet O ");
                commandString.AppendFormat("LEFT OUTER JOIN OutletROL OROL WITH(NOLOCK) ON O.UID = OROL.OutletUID AND OROL.Month = CAST(Convert(VARCHAR(7),GETDATE(),120) + '-01' AS DATETIME) AND OROL.ItemTypeEnum = {0} ", ItemCategory);

                commandString.AppendFormat("LEFT OUTER JOIN OutletItemCategory MOI WITH(NOLOCK) ON O.UID = MOI.OutletUID AND MOI.mpt_ItemTypeEnum = {0} ", ItemCategory);

                commandString.Append("LEFT OUTER JOIN ( ");
                commandString.Append("   SELECT C.OutletUID,C.ScheduledStart");
                commandString.Append("   FROM Call C ");
                commandString.Append("    INNER JOIN ( ");
                commandString.Append("       SELECT C.OutletUID,MAX(C.ScheduledStart) as MAX_CallDate ");
                commandString.Append("        FROM Call C ");
                commandString.Append("       GROUP BY C.OutletUID ");
                commandString.Append("       )KK ON C.ScheduledStart = KK.MAX_CallDate AND C.OutletUID = KK.OutletUID ");
                commandString.Append(" )CC ON O.UID = CC.OutletUID ");


                commandString.Append("INNER JOIN DistributorOutlet DO ON O.UID = DO.OutletUID  ");
                commandString.Append("INNER JOIN Distributor DS ON DO.DistributorUID = DS.UID ");
                commandString.Append("INNER JOIN AgentOutlet AO ON O.UID = AO.OutletUID ");
                commandString.Append("INNER JOIN Agent AG ON AO.AgentUID = AG.UID ");

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager || credential.Designation == EmployeeBL.DesignationEnum.SalesManager
                                    || credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager || credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner
                                    || credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                {
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON DWN.ParentUID = FSC.UID AND FSC.mpt_DesignationEnum = 16 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                }

                else if (credential.Designation == EmployeeBL.DesignationEnum.SalesExecutive)
                {
                    commandString.Append("INNER JOIN Agent SE ON AG.ParentUID = SE.UID AND SE.mpt_DesignationEnum = 76 AND SE.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON SE.EmployeeUID = FSC.UID AND FSC.mpt_DesignationEnum = 76 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                }

                commandString.Append("LEFT OUTER JOIN Area BU ON DS.BusinessAreaUID = BU.UID ");
                commandString.Append("LEFT OUTER JOIN Area BR ON BU.ParentUID = BR.UID ");
                commandString.Append("LEFT OUTER JOIN Area BZ ON BR.ParentUID = BZ.UID ");
                commandString.AppendFormat("WHERE O.ExpiryDate IS NULL AND ISNULL(AG.mpt_TypeEnum,0) <> 1 AND ISNULL(DS.mpt_TypeEnum,0) <> 1 AND AG.ExpiryDate IS NULL AND DO.ExpiryDate IS NULL AND AO.ExpiryDate IS NULL AND OROL.FinalValue > 0 AND DS.ExpiryDate IS NULL ", ItemCategory);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                    commandString.AppendFormat("AND DS.UID = {0} ", credential.DistributorUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager)
                    commandString.AppendFormat("AND ASM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager)
                    commandString.AppendFormat("AND SM.ParentUID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SalesManager)
                    commandString.AppendFormat("AND SM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.SalesExecutive)
                    commandString.AppendFormat("AND FSC.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner)
                    commandString.AppendFormat("AND DWN.UID = {0} ", credential.EmployeeUID);

                if (BussinessAreaUID > 0)
                    commandString.Append(" AND BU.UID = " + BussinessAreaUID);
                else if (RegionUID > 0)
                    commandString.Append(" AND BR.UID = " + RegionUID);
                else if (ZoneUID > 0)
                    commandString.Append(" AND BZ.UID = " + ZoneUID);

                if (ItemCategory == (int)ItemBL.TypeEnum.SIM || ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    commandString.Append(" AND O.mpt_TypeEnum = 1 ");

                OleDbCommand command = new OleDbCommand(commandString.ToString(), connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                return dataSet;
            }
        }

        // GISReport.aspx
        public List<OutletData> GetGISOutletsByArea(int areaUID, int areaLevel, int ItemCategory,UserCredential credential)
        {
            int? townuid = -1;
            int? subtownuid = -1;
            int? districtuid = -1;
            int? provinceuid = -1;

            if (areaLevel == 0 && areaUID == 0)
                return null;
            else if (areaLevel == (int)AreaBL.TypeEnum.Town)
                townuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.SubTown)
                subtownuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.District)
                districtuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.Province)
                provinceuid = areaUID;
            


            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
              
               // string commandString = "";

                StringBuilder commandString = new StringBuilder("SELECT O.UID ");
                        commandString.Append(",O.ID AS OutletID " );
                        commandString.Append(",O.Name AS OutletName " );
                        commandString.Append(",O.TLRNumber AS TLRNumber " );
                        commandString.Append(",O.StreetAddress " );
                        commandString.Append(",DS.Name as Dealer " ); 
                        if(ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                            commandString.Append(",CAST(ISNULL(KK.CurrentBalance,0) AS DECIMAL(18,2)) AS BalanceQty ");
                        else
                            commandString.Append(",CAST(ISNULL(MOI.BalanceQty,0) AS INT) AS BalanceQty ");

                        commandString.Append(",ISNULL(O.Latitude,0) as Latitude " );
                        commandString.Append(",ISNULL(O.Longitude,0) as Longitude " );
                        commandString.Append(",T.UID AS TownUID " );
                        commandString.Append(",T.Description AS Town " );
                        commandString.Append(",AG.TLSNumber AS DSRNumber ");
                        commandString.Append(",OperationalDistrict = BU.Description " );
                        commandString.Append(",O.Telephone1 AS Telephone " );
                        commandString.Append(",ISNULL(OROL.FinalValue,0) as Reorder_Level" );

                        if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                            commandString.Append(",ReorderStatus = ISNULL(CASE WHEN KK.CurrentBalance < OROL.FinalValue THEN 1 WHEN KK.CurrentBalance > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");

                        else
                            commandString.Append(",ReorderStatus = ISNULL(CASE WHEN MOI.BalanceQty < OROL.FinalValue THEN 1 WHEN MOI.BalanceQty > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");

                        commandString.Append("FROM Outlet O " );
                        commandString.AppendFormat("LEFT OUTER JOIN OutletROL OROL ON O.UID = OROL.OutletUID AND OROL.Month = CAST(Convert(VARCHAR(7),GETDATE(),120) + '-01' AS DATETIME) AND OROL.ItemTypeEnum = {0} ",ItemCategory );
                        if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                        {
                            commandString.Append("LEFT OUTER JOIN ( ");
                            commandString.Append("SELECT MO.OutletUID,SUM(MO.BalanceQty * IPL.UnitListPrice) AS CurrentBalance ");
                            commandString.Append("FROM OutletItem MO WITH(NOLOCK) ");
                            commandString.Append("INNER JOIN ItemPriceList IPL ON MO.ItemUID = IPL.ItemUID ");
                            commandString.Append("INNER JOIN Item I ON MO.ItemUID = I.UID ");
                            commandString.Append("WHERE  I.mpt_TypeEnum = 3 AND I.ExpiryDate IS NULL AND MO.mpt_TypeEnum = 2 AND IPL.IsActive = 1 AND IPL.PriceListUID = 27 ");
                            commandString.Append("GROUP BY MO.OutletUID ");
                            commandString.Append(")KK ON O.UID = KK.OutletUID ");
                        }
                        else
                            commandString.AppendFormat("LEFT OUTER JOIN OutletItem MOI WITH(NOLOCK) ON O.UID = MOI.OutletUID AND MOI.mpt_TypeEnum = 1 AND MOI.ItemUID = {0} ", ItemCategory);

                        commandString.Append("INNER JOIN DistributorOutlet DO ON O.UID = DO.OutletUID  ");
                        commandString.Append("INNER JOIN Distributor DS ON DO.DistributorUID = DS.UID ");
                        commandString.Append("INNER JOIN AgentOutlet AO ON O.UID = AO.OutletUID ");         
                        commandString.Append("INNER JOIN Agent AG ON AO.AgentUID = AG.UID ");

                        if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager || credential.Designation == EmployeeBL.DesignationEnum.SalesManager
                                            || credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager || credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner
                                            || credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                        {
                            commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                            commandString.Append("INNER JOIN Employee FSC ON DWN.ParentUID = FSC.UID AND FSC.mpt_DesignationEnum = 16 AND FSC.ExpiryDate IS NULL ");
                            commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                            commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                        }

                        commandString.Append("LEFT OUTER JOIN Area T ON O.AreaUID = T.UID AND T.mpt_TypeEnum = 4 " );
                        commandString.Append("LEFT OUTER JOIN Area ST ON T.UID = ST.ParentUID AND ST.mpt_TypeEnum = 5 " );
                        commandString.Append("LEFT OUTER JOIN Area D ON T.ParentUID = D.UID AND D.mpt_TypeEnum = 3 " );
                        commandString.Append( "LEFT OUTER JOIN Area P ON D.ParentUID = P.UID AND P.mpt_TypeEnum = 2 " );
                        commandString.Append("LEFT OUTER JOIN Area BU ON DS.BusinessAreaUID = BU.UID ");
                        commandString.AppendFormat("WHERE O.ExpiryDate IS NULL AND ISNULL(AG.mpt_TypeEnum,0) <> 1 AND ISNULL(DS.mpt_TypeEnum,0) <> 1 AND AG.ExpiryDate IS NULL AND DO.ExpiryDate IS NULL AND AO.ExpiryDate IS NULL AND OROL.FinalValue > 0 AND DS.ExpiryDate IS NULL ", ItemCategory);

                        if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                            commandString.AppendFormat("AND DS.UID = {0} ", credential.DistributorUID);

                        if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager)
                            commandString.AppendFormat("AND ASM.UID = {0} ",credential.EmployeeUID);

                        if (credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager)
                           commandString.AppendFormat("AND SM.ParentUID = {0} ",credential.EmployeeUID);

                        if (credential.Designation == EmployeeBL.DesignationEnum.SalesManager)
                           commandString.AppendFormat("AND SM.UID = {0} ",credential.EmployeeUID);

                        if (credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator)
                           commandString.AppendFormat("AND FSC.UID = {0} ",credential.EmployeeUID);

                        if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner)
                           commandString.AppendFormat("AND DWN.UID = {0} ",credential.EmployeeUID);

                        if (provinceuid > 0)
                            commandString.Append(" AND P.UID = " + provinceuid);
                        else if (districtuid > 0)
                            commandString.Append(" AND D.UID = " + districtuid);
                        else if (townuid > 0)
                            commandString.Append(" AND T.UID = " + townuid);
                        else if (subtownuid > 0)
                            commandString.Append(" AND ST.UID = " + subtownuid);
             
                        if (ItemCategory == (int)ItemBL.TypeEnum.SIM || ItemCategory == (int)ItemBL.TypeEnum.Reload)
                            commandString.Append(" AND O.mpt_TypeEnum = 1 ");

//                        commandString.Append(" GROUP BY O.UID,O.Name,O.ID,O.Latitude,O.Longitude,BU.Description,AG.TLSNumber,T.UID,T.Description,O.TLRNumber,BU.Description,O.StreetAddress, DS.Name, O.Telephone1,O.mpt_TypeEnum");


                OleDbCommand command = new OleDbCommand(commandString.ToString(), connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                List<OutletData> list = new List<OutletData>();
                OutletData ot = new OutletData();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    ot.areaUID = areaUID;
                    ot.outletUID = Convert.ToInt32(r["UID"].ToString());
                    ot.TLRNumber = r["TLRNumber"].ToString();
                    ot.name = r["OutletName"].ToString();
                    ot.Address = r["StreetAddress"].ToString();
                    ot.ID = r["OutletID"].ToString();
                    ot.curentbalance = Convert.ToDecimal(r["BalanceQty"].ToString());
                    ot.outletstatus = Convert.ToInt32(r["ReorderStatus"].ToString());
                    ot.reorder_Level = Convert.ToInt32(r["Reorder_Level"]);
                    ot.DealerName = r["Dealer"].ToString();
                    ot.Telephone1 = r["Telephone"].ToString();
                    ot.OperationalDistrict = r["OperationalDistrict"].ToString();
                    ot.DSRnumber = r["DSRNumber"].ToString(); 
                  

                    GLatLng p = new GLatLng();
                    if (r["Latitude"].ToString() != "")
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    if (r["Longitude"].ToString() != "")
                    p.lng = Convert.ToDouble(r["Longitude"].ToString());
                    ot.point = p;
                    
                    list.Add(ot);
                    ot = new OutletData();
                }
                return list;
            }
        }

        public List<OutletData> GetGISOutletsByAreaNew(int areaUID, int areaLevel, int ItemCategory,int? ItemUID)
        {
            int? townuid = -1;
            int? subtownuid = -1;
            int? districtuid = -1;
            int? provinceuid = -1;

            if (ItemUID < 0)
                ItemUID = -1;

            if (areaLevel == 0 && areaUID == 0)
                return null;
            else if (areaLevel == (int)AreaBL.TypeEnum.Town)
                townuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.SubTown)
                subtownuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.District)
                districtuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.Province)
                provinceuid = areaUID;

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {

                string commandString = "";

                commandString = string.Format(
                    "SELECT O.UID" +
                        ",O.ID AS OutletID " +
                        ",O.Name AS OutletName " +
                        ",O.TLRNumber AS TLRNumber " +
                        ",O.StreetAddress " +
                        ",DS.Name as Dealer " +
                        ",CAST(SUM(ISNULL(MOI.BalanceQty,0)) AS INT) AS BalanceQty " +
                        ",ISNULL(O.Latitude,0) as Latitude " +
                        ",ISNULL(O.Longitude,0) as Longitude " +
                        ",T.UID AS TownUID " +
                        ",T.Description AS Town " +
                        ",O.Telephone1 AS Telephone " +
                        ",ISNULL(SUM(OROL.FinalValue),0) as Reorder_Level" +
                        ",ReorderStatus = ISNULL(CASE WHEN SUM(MOI.BalanceQty) < SUM(OROL.FinalValue) THEN 1 WHEN SUM(MOI.BalanceQty) > SUM(OROL.FinalValue) THEN 2 WHEN  SUM(OROL.FinalValue) IS NULL THEN 0 END,0) " +
                        "FROM mob_OutletItem MOI WITH(NOLOCK) " +
                        "LEFT OUTER JOIN OutletROL OROL ON MOI.OutletUID = OROL.OutletUID AND OROL.ItemTypeEnum = {0} " +
                        "INNER JOIN Outlet O ON MOI.OutletUID = O.UID AND O.ExpiryDate IS NULL " +
                        "INNER JOIN DistributorOutlet DO ON O.UID = DO.OutletUID  " +
                        "INNER JOIN Distributor DS ON DO.DistributorUID = DS.UID " +
                        "LEFT OUTER JOIN Area T ON O.AreaUID = T.UID AND T.mpt_TypeEnum = 4 " +
                        "LEFT OUTER JOIN Area ST ON T.UID = ST.ParentUID AND ST.mpt_TypeEnum = 5 " +
                        "LEFT OUTER JOIN Area D ON T.ParentUID = D.UID AND D.mpt_TypeEnum = 3 " +
                        "LEFT OUTER JOIN Area P ON D.ParentUID = P.UID AND P.mpt_TypeEnum = 2 " +
                        "WHERE MOI.mpt_TypeEnum = 1 AND DO.ExpiryDate IS NULL AND MOI.ItemUID = {0}", ItemCategory);

                if (provinceuid > 0)
                    commandString += (" AND P.UID = " + provinceuid);
                else if (districtuid > 0)
                    commandString += (" AND D.UID = " + districtuid);
                else if (townuid > 0)
                    commandString += (" AND T.UID = " + townuid);
                else if (subtownuid > 0)
                    commandString += (" AND ST.UID = " + subtownuid);

                commandString += "GROUP BY O.UID,O.Name,O.ID,O.Latitude,O.Longitude,T.UID,T.Description,O.TLRNumber,O.StreetAddress, DS.Name, O.Telephone1";

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                List<OutletData> list = new List<OutletData>();
                OutletData ot = new OutletData();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    ot.areaUID = areaUID;
                    ot.outletUID = Convert.ToInt32(r["UID"].ToString());
                    ot.TLRNumber = r["TLRNumber"].ToString();
                    ot.name = r["OutletName"].ToString();
                    ot.Address = r["StreetAddress"].ToString();
                    ot.curentbalance = Convert.ToInt32(r["BalanceQty"].ToString());
                    ot.outletstatus = Convert.ToInt32(r["ReorderStatus"].ToString());
                    ot.reorder_Level = Convert.ToInt32(r["Reorder_Level"]);
                    ot.DealerName = r["Dealer"].ToString();
                    ot.Telephone1 = r["Telephone"].ToString();

                    GLatLng p = new GLatLng();
                    if (r["Latitude"].ToString() != "")
                        p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    if (r["Longitude"].ToString() != "")
                        p.lng = Convert.ToDouble(r["Longitude"].ToString());
                    ot.point = p;

                    list.Add(ot);
                    ot = new OutletData();
                }
                return list;
            }
        }

        public static DataSet GISOutletsByArea(int areaUID, int areaLevel, int ItemCategory, UserCredential credential)
        {
            int? townuid = -1;
            int? subtownuid = -1;
            int? districtuid = -1;
            int? provinceuid = -1;

            if (areaLevel == 0 && areaUID == 0)
                return null;
            else if (areaLevel == (int)AreaBL.TypeEnum.Town)
                townuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.SubTown)
                subtownuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.District)
                districtuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.Province)
                provinceuid = areaUID;

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                StringBuilder commandString = new StringBuilder("SELECT O.UID ");
                commandString.Append(",O.ID AS OutletID ");
                commandString.Append(",O.Name AS OutletName ");
                commandString.Append(",O.TLRNumber AS TLRNumber ");
                commandString.Append(",O.StreetAddress ");
                commandString.Append(",DS.Name as Dealer ");
                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                    commandString.Append(",CAST(ISNULL(KK.CurrentBalance,0) AS DECIMAL(18,2)) AS BalanceQty ");
                else
                    commandString.Append(",CAST(ISNULL(MOI.BalanceQty,0) AS INT) AS BalanceQty ");

                commandString.Append(",ISNULL(O.Latitude,0) as Latitude ");
                commandString.Append(",ISNULL(O.Longitude,0) as Longitude ");
                commandString.Append(",T.UID AS TownUID ");
                commandString.Append(",T.Description AS Town ");
                commandString.Append(",AG.TLSNumber AS DSRNumber ");
                commandString.Append(",OperationalDistrict = BU.Description ");
                commandString.Append(",O.Telephone1 AS Telephone ");
                commandString.Append(",ISNULL(OROL.FinalValue,0) as Reorder_Level");

                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                {
                    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN KK.CurrentBalance < OROL.FinalValue THEN 1 WHEN KK.CurrentBalance > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                    commandString.Append(",Status = ISNULL(CASE WHEN KK.CurrentBalance < OROL.FinalValue THEN 'Below' WHEN KK.CurrentBalance >= OROL.FinalValue THEN 'Above' WHEN ( KK.CurrentBalance = 0 AND ISNULL(OROL.FinalValue,0)  = 0) THEN 'Below' ELSE '' END,0) ");
                }
                else
                {
                    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN MOI.BalanceQty < OROL.FinalValue THEN 1 WHEN MOI.BalanceQty > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                    commandString.Append(",Status = ISNULL(CASE WHEN MOI.BalanceQty < OROL.FinalValue THEN 'Below' WHEN MOI.BalanceQty >= OROL.FinalValue THEN 'Above' WHEN ( MOI.BalanceQty = 0 AND ISNULL(OROL.FinalValue,0)  = 0) THEN 'Below' ELSE '' END,0) ");
                }
                commandString.Append("FROM Outlet O ");
                commandString.AppendFormat("LEFT OUTER JOIN OutletROL OROL ON O.UID = OROL.OutletUID AND OROL.Month = CAST(Convert(VARCHAR(7),GETDATE(),120) + '-01' AS DATETIME) AND OROL.ItemTypeEnum = {0} ", ItemCategory);
                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                {
                    commandString.Append("LEFT OUTER JOIN ( ");
                    commandString.Append("SELECT MO.OutletUID,SUM(MO.BalanceQty * IPL.UnitListPrice) AS CurrentBalance ");
                    commandString.Append("FROM OutletItem MO WITH(NOLOCK) ");
                    commandString.Append("INNER JOIN ItemPriceList IPL ON MO.ItemUID = IPL.ItemUID ");
                    commandString.Append("INNER JOIN Item I ON MO.ItemUID = I.UID ");
                    commandString.Append("WHERE  I.mpt_TypeEnum = 3 AND I.ExpiryDate IS NULL AND MO.mpt_TypeEnum = 2 AND IPL.IsActive = 1 AND IPL.PriceListUID = 27 ");
                    commandString.Append("GROUP BY MO.OutletUID ");
                    commandString.Append(")KK ON O.UID = KK.OutletUID ");
                }
                else
                    commandString.AppendFormat("LEFT OUTER JOIN OutletItem MOI WITH(NOLOCK) ON O.UID = MOI.OutletUID AND MOI.mpt_TypeEnum = 1 AND MOI.ItemUID = {0} ", ItemCategory);

                commandString.Append("INNER JOIN DistributorOutlet DO ON O.UID = DO.OutletUID  ");
                commandString.Append("INNER JOIN Distributor DS ON DO.DistributorUID = DS.UID ");
                commandString.Append("INNER JOIN AgentOutlet AO ON O.UID = AO.OutletUID ");
                commandString.Append("INNER JOIN Agent AG ON AO.AgentUID = AG.UID ");

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager || credential.Designation == EmployeeBL.DesignationEnum.SalesManager
                                    || credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager || credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner
                                    || credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                {
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON DWN.ParentUID = FSC.UID AND FSC.mpt_DesignationEnum = 16 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                }

                commandString.Append("LEFT OUTER JOIN Area T ON O.AreaUID = T.UID AND T.mpt_TypeEnum = 4 ");
                commandString.Append("LEFT OUTER JOIN Area ST ON T.UID = ST.ParentUID AND ST.mpt_TypeEnum = 5 ");
                commandString.Append("LEFT OUTER JOIN Area D ON T.ParentUID = D.UID AND D.mpt_TypeEnum = 3 ");
                commandString.Append("LEFT OUTER JOIN Area P ON D.ParentUID = P.UID AND P.mpt_TypeEnum = 2 ");
                commandString.Append("LEFT OUTER JOIN Area BU ON DS.BusinessAreaUID = BU.UID ");
                commandString.AppendFormat("WHERE O.ExpiryDate IS NULL AND ISNULL(AG.mpt_TypeEnum,0) <> 1 AND ISNULL(DS.mpt_TypeEnum,0) <> 1 AND AG.ExpiryDate IS NULL AND DO.ExpiryDate IS NULL AND AO.ExpiryDate IS NULL AND OROL.FinalValue > 0 AND DS.ExpiryDate IS NULL ", ItemCategory);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                    commandString.AppendFormat("AND DS.UID = {0} ", credential.DistributorUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager)
                    commandString.AppendFormat("AND ASM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager)
                    commandString.AppendFormat("AND SM.ParentUID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SalesManager)
                    commandString.AppendFormat("AND SM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator)
                    commandString.AppendFormat("AND FSC.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner)
                    commandString.AppendFormat("AND DWN.UID = {0} ", credential.EmployeeUID);

                if (provinceuid > 0)
                    commandString.Append(" AND P.UID = " + provinceuid);
                else if (districtuid > 0)
                    commandString.Append(" AND D.UID = " + districtuid);
                else if (townuid > 0)
                    commandString.Append(" AND T.UID = " + townuid);
                else if (subtownuid > 0)
                    commandString.Append(" AND ST.UID = " + subtownuid);

                if (ItemCategory == (int)ItemBL.TypeEnum.SIM || ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    commandString.Append(" AND O.mpt_TypeEnum = 1 ");

                OleDbCommand command = new OleDbCommand(commandString.ToString(), connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                return dataSet;
            }
        }

        public static void GenerateReport(int areaUID, int areaLevel, int ItemCategory,string filePath, UserCredential credential)
        { 
            int? townuid = -1;
            int? subtownuid = -1;
            int? districtuid = -1;
            int? provinceuid = -1;

            if (areaLevel == 0 && areaUID == 0)
                return ;
            else if (areaLevel == (int)AreaBL.TypeEnum.Town)
                townuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.SubTown)
                subtownuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.District)
                districtuid = areaUID;
            else if (areaLevel == (int)AreaBL.TypeEnum.Province)
                provinceuid = areaUID;

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                StringBuilder commandString = new StringBuilder("SELECT O.UID ");
                commandString.Append(",O.ID AS OutletID ");
                commandString.Append(",O.Name AS OutletName ");
                commandString.Append(",O.TLRNumber AS TLRNumber ");
                commandString.Append(",O.StreetAddress ");
                commandString.Append(",DS.Name as Dealer ");
                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                    commandString.Append(",CAST(ISNULL(KK.CurrentBalance,0) AS DECIMAL(18,2)) AS BalanceQty ");
                else
                    commandString.Append(",CAST(ISNULL(MOI.BalanceQty,0) AS INT) AS BalanceQty ");

                commandString.Append(",ISNULL(O.Latitude,0) as Latitude ");
                commandString.Append(",ISNULL(O.Longitude,0) as Longitude ");
                commandString.Append(",T.UID AS TownUID ");
                commandString.Append(",T.Description AS Town ");
                commandString.Append(",AG.TLSNumber AS DSRNumber ");
                commandString.Append(",OperationalDistrict = BU.Description ");
                commandString.Append(",O.Telephone1 AS Telephone ");
                commandString.Append(",ISNULL(OROL.FinalValue,0) as Reorder_Level");

                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                {
                    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN KK.CurrentBalance < OROL.FinalValue THEN 1 WHEN KK.CurrentBalance > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                    commandString.Append(",Status = ISNULL(CASE WHEN KK.CurrentBalance < OROL.FinalValue THEN 'Below' WHEN KK.CurrentBalance >= OROL.FinalValue THEN 'Above' WHEN ( KK.CurrentBalance = 0 AND ISNULL(OROL.FinalValue,0)  = 0) THEN 'Below' ELSE '' END,0) ");
                }
                else
                {
                    commandString.Append(",ReorderStatus = ISNULL(CASE WHEN MOI.BalanceQty < OROL.FinalValue THEN 1 WHEN MOI.BalanceQty > OROL.FinalValue THEN 2 WHEN  OROL.FinalValue IS NULL THEN 0 END,0) ");
                    commandString.Append(",Status = ISNULL(CASE WHEN MOI.BalanceQty < OROL.FinalValue THEN 'Below' WHEN MOI.BalanceQty >= OROL.FinalValue THEN 'Above' WHEN ( MOI.BalanceQty = 0 AND ISNULL(OROL.FinalValue,0)  = 0) THEN 'Below' ELSE '' END,0) ");
                }
                commandString.Append("FROM Outlet O ");
                commandString.AppendFormat("LEFT OUTER JOIN OutletROL OROL ON O.UID = OROL.OutletUID AND OROL.Month = CAST(Convert(VARCHAR(7),GETDATE(),120) + '-01' AS DATETIME) AND OROL.ItemTypeEnum = {0} ", ItemCategory);
                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                {
                    commandString.Append("LEFT OUTER JOIN ( ");
                    commandString.Append("SELECT MO.OutletUID,SUM(MO.BalanceQty * IPL.UnitListPrice) AS CurrentBalance ");
                    commandString.Append("FROM OutletItem MO WITH(NOLOCK) ");
                    commandString.Append("INNER JOIN ItemPriceList IPL ON MO.ItemUID = IPL.ItemUID ");
                    commandString.Append("INNER JOIN Item I ON MO.ItemUID = I.UID ");
                    commandString.Append("WHERE  I.mpt_TypeEnum = 3 AND I.ExpiryDate IS NULL AND MO.mpt_TypeEnum = 2 AND IPL.IsActive = 1 AND IPL.PriceListUID = 27 ");
                    commandString.Append("GROUP BY MO.OutletUID ");
                    commandString.Append(")KK ON O.UID = KK.OutletUID ");
                }
                else
                    commandString.AppendFormat("LEFT OUTER JOIN OutletItem MOI WITH(NOLOCK) ON O.UID = MOI.OutletUID AND MOI.mpt_TypeEnum = 1 AND MOI.ItemUID = {0} ", ItemCategory);

                commandString.Append("INNER JOIN DistributorOutlet DO ON O.UID = DO.OutletUID  ");
                commandString.Append("INNER JOIN Distributor DS ON DO.DistributorUID = DS.UID ");
                commandString.Append("INNER JOIN AgentOutlet AO ON O.UID = AO.OutletUID ");
                commandString.Append("INNER JOIN Agent AG ON AO.AgentUID = AG.UID ");

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager || credential.Designation == EmployeeBL.DesignationEnum.SalesManager
                                    || credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager || credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner
                                    || credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                {
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON DWN.ParentUID = FSC.UID AND FSC.mpt_DesignationEnum = 16 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                }

                commandString.Append("LEFT OUTER JOIN Area T ON O.AreaUID = T.UID AND T.mpt_TypeEnum = 4 ");
                commandString.Append("LEFT OUTER JOIN Area ST ON T.UID = ST.ParentUID AND ST.mpt_TypeEnum = 5 ");
                commandString.Append("LEFT OUTER JOIN Area D ON T.ParentUID = D.UID AND D.mpt_TypeEnum = 3 ");
                commandString.Append("LEFT OUTER JOIN Area P ON D.ParentUID = P.UID AND P.mpt_TypeEnum = 2 ");
                commandString.Append("LEFT OUTER JOIN Area BU ON DS.BusinessAreaUID = BU.UID ");
                commandString.AppendFormat("WHERE O.ExpiryDate IS NULL AND ISNULL(AG.mpt_TypeEnum,0) <> 1 AND ISNULL(DS.mpt_TypeEnum,0) <> 1 AND AG.ExpiryDate IS NULL AND DO.ExpiryDate IS NULL AND AO.ExpiryDate IS NULL AND OROL.FinalValue > 0 AND DS.ExpiryDate IS NULL ", ItemCategory);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                    commandString.AppendFormat("AND DS.UID = {0} ", credential.DistributorUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager)
                    commandString.AppendFormat("AND ASM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager)
                    commandString.AppendFormat("AND SM.ParentUID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SalesManager)
                    commandString.AppendFormat("AND SM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator)
                    commandString.AppendFormat("AND FSC.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOwner)
                    commandString.AppendFormat("AND DWN.UID = {0} ", credential.EmployeeUID);

                if (provinceuid > 0)
                    commandString.Append(" AND P.UID = " + provinceuid);
                else if (districtuid > 0)
                    commandString.Append(" AND D.UID = " + districtuid);
                else if (townuid > 0)
                    commandString.Append(" AND T.UID = " + townuid);
                else if (subtownuid > 0)
                    commandString.Append(" AND ST.UID = " + subtownuid);

                if (ItemCategory == (int)ItemBL.TypeEnum.SIM || ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    commandString.Append(" AND O.mpt_TypeEnum = 1 ");

                OleDbCommand command = new OleDbCommand(commandString.ToString(), connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                TextWriter tw = new StreamWriter(filePath);
                StringBuilder Header = new StringBuilder();
                StringBuilder contents = new StringBuilder();
              
                //header line
                Header.Append("Outlet Name,Retailer ID,DSR Number,Operational District,Dealer Name,Reorder Level,Balance,Town,Status");
                
                contents.Append(Header.ToString().TrimEnd(',') + "\r\n");

                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    string name = r["OutletName"].ToString();
                    if(name != null)
                        name= name.Replace(',', ' ');
                    contents.Append(name + "," + r["OutletID"].ToString() + "," + r["DSRNumber"].ToString() + "," + r["OperationalDistrict"].ToString() + "," + r["Dealer"].ToString() + "," + Convert.ToDecimal(r["Reorder_Level"]) + "," + Convert.ToDecimal(r["BalanceQty"].ToString()) + "," + r["Town"].ToString() + "," + r["Status"].ToString() + "\r\n");
                }
                tw.Write(contents.ToString());
                tw.Flush();
                tw.Close();
            }
          
        }

        //Gis View
        public List<OutletData> GIS_RetailerPerformance(int? distributoruid, DateTime? fromDate, DateTime? toDate, int? CategoryUID, List<int> selectedItems,UserCredential credential)
        {
            if (distributoruid == -1)
                distributoruid = null;

            if (CategoryUID == -1)
                CategoryUID = null;

            //if (itemUID == -1)
            //    itemUID = null;
            string strItmss = String.Empty;

            DateTime from = fromDate.Value;
            DateTime to = toDate.Value;
            from = from.Date;
            to = to.Date.AddHours(23).AddMinutes(59);  

            if (selectedItems.Count() > 0)
            {
                if (Convert.ToInt32(selectedItems[0]) == 0)
                {
                    strItmss = null;
                }

                else
                {
                    foreach (int uid in selectedItems)
                    {
                        if (uid > 0)
                        {
                            if (String.IsNullOrEmpty(strItmss))
                                strItmss = ",";

                            strItmss += (uid + ",");
                        }
                    }
                }
            }

            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {                      
                connection.Open();

                OleDbCommand command = new OleDbCommand("GIS_RetailerPerformance", connection);
                command.CommandType = CommandType.StoredProcedure;

                command.Parameters.AddWithValue("@DistributorUID", distributoruid);
                command.Parameters.AddWithValue("@CategoryUID", CategoryUID);
                command.Parameters.AddWithValue("@ItemUIDs", strItmss);
                command.Parameters.AddWithValue("@StartDate", from);
                command.Parameters.AddWithValue("@EndDate", to);
                command.Parameters.AddWithValue("@UserDesignationEnum", (int)credential.Designation);
                command.Parameters.AddWithValue("@UserEmployeeUID", credential.EmployeeUID);
              

                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();

                List<OutletData> list = new List<OutletData>();                                
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                     OutletData od  = new OutletData();
                     location p = new location
                     {
                         lat = Convert.ToDouble(r["Latitude"].ToString()),
                         lon = Convert.ToDouble(r["Longitude"].ToString())
                     };
                     od.location = p;
                     od.ID = r["OutletID"].ToString();
                     od.name = r["OutletName"].ToString();
                     od.Area = r["Area"].ToString();
                     od.DSRnumber = r["DSRNumber"].ToString();
                     od.TLRNumber = r["TLRNumber"].ToString();
                     od.Address = r["StreetAddress"].ToString();                    
                     od.DSR = r["DSR"].ToString();
                     od.DealerName = r["Dealer"].ToString();
                     od.Telephone1 = r["Telephone"].ToString();

                     od.reloadValue = Convert.ToInt32(r["Reload"]);
                     od.simCount = Convert.ToInt32(r["SIM"]);
                     od.voucherValue = Convert.ToDouble(r["Voucher"].ToString());
                     list.Add(od);
                  
                }
             
                return list;
            }
        
        }

        //Gis View Retailer Stock Availability
        public List<OutletData> GIS_RetailerStockAvalilability(int? distributoruid, int? categoryUid, List<int> selectedItems,UserCredential credentail) //DateTime? fromDate, DateTime? toDate, 
        {

            if (distributoruid == -1)
                distributoruid = null;

            if (categoryUid == -1)
                categoryUid = null;

            //if (itemUID == -1)
            //    itemUID = null;
            string strItmss = String.Empty;

            if (selectedItems.Count > 0)
            {
                if (Convert.ToInt32(selectedItems[0]) == 0)
                {
                    strItmss = null;
                }

                else
                {
                    foreach (int uid in selectedItems)
                    {
                        if (uid > 0)
                        {
                            if (String.IsNullOrEmpty(strItmss))
                                strItmss = ",";

                            strItmss += (uid + ",");
                        }
                    }
                }
            }
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                connection.Open();

                OleDbCommand command = new OleDbCommand("rptRetailerStockAvailabilityGIS", connection);
                command.CommandTimeout = 2000;
                command.CommandType = CommandType.StoredProcedure;

                command.Parameters.AddWithValue("@DistributorUID", distributoruid);
                command.Parameters.AddWithValue("@CategoryUID", categoryUid);
                command.Parameters.AddWithValue("@ItemUIDs", strItmss);
                command.Parameters.AddWithValue("@UserDesignationEnum", (int)credentail.Designation);
                command.Parameters.AddWithValue("@UserEmployeeUID", credentail.EmployeeUID); 

                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");
                
                connection.Close();

                // ReSharper disable once SuggestUseVarKeywordEvident
                List<OutletData> list = new List<OutletData>();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    OutletData od = new OutletData();
                    location p = new location
                    {
                        lat = Convert.ToDouble(r["Latitude"].ToString()),
                        lon = Convert.ToDouble(r["Longitude"].ToString())
                    };
                    od.location = p;
                    od.ID = r["ID"].ToString();
                    od.name = r["Name"].ToString();
                    od.curentbalance =Convert.ToInt32(r["BalanceQty"].ToString());
                   // od.Description = r["Description"].ToString();
                    od.DSRnumber = r["DSRNumber"].ToString();
                    od.Area = r["Area"].ToString();
                    od.dealerName = r["DistributorName"].ToString();
                    od.Address = r["StreetAddress"].ToString();
                    od.Telephone1 = r["Telephone1"].ToString();

                    list.Add(od);

                }
                return list;           
            }

        }

        // GISReport2.aspx
        public List<AreaData> GetOutletDistrictsData(int ItemCategory,UserCredential credential)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                int isvoucheronly = -1;
                if (ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    isvoucheronly = 1;

                //string commandString = "";

                StringBuilder commandString = new StringBuilder("SELECT KK.DistrictUID,KK.District,KK.MidLat,KK.MidLng,SUM(KK.CurrentBalance) AS CurrentBalance,SUM(KK.ReOrderQty) AS ReOrderQty ");
                            commandString.Append(",SUM(OutletCount) AS OutletCount,SUM(OutletOutOfStockCount) AS OutletOutOfStockCount ");
                            commandString.Append(",Percentage_ = CAST(CASE WHEN SUM(OutletCount) <> 0 THEN (CAST(SUM(OutletOutOfStockCount) AS DECIMAL(18,2)) / SUM(OutletCount))* 100 ELSE 100 END AS DECIMAL(18,2)) ");
                            commandString.Append("FROM ( " );
                            commandString.Append("SELECT D.UID AS DistrictUID ");
                            commandString.Append(",D.Description AS District " );
                            commandString.Append(",D.MidLat " );
                            commandString.Append(",D.MidLng " );
                            commandString.Append(",CAST(SUM(ISNULL(MOI.BalanceQty,0)) AS INT) AS CurrentBalance " );
                            commandString.Append(",ReOrderQty = 0 ");
                            commandString.Append(",OutletCount = COUNT(DISTINCT O.UID) ");
                            commandString.Append(",OutletOutOfStockCount = 0 ");
                            commandString.Append("FROM Area D ");
                            commandString.Append("LEFT OUTER JOIN Area T ON D.UID = T.ParentUID AND T.mpt_TypeEnum = 4 " );
                            commandString.AppendFormat("LEFT OUTER JOIN Outlet O ON T.UID = O.AreaUID AND O.ExpiryDate IS NULL AND ({0} = -1 OR O.mpt_TypeEnum = {0}) ",isvoucheronly);
                            commandString.AppendFormat("LEFT OUTER JOIN OutletItem MOI ON O.UID = MOI.OutletUID AND MOI.mpt_TypeEnum = 1 AND MOI.ItemUID = {0} ",ItemCategory);
                            commandString.AppendFormat("LEFT OUTER JOIN OutletROL MOIL ON O.UID = MOIL.OutletUID AND MOIL.Month = CAST(Convert(VARCHAR(7),GETDATE(),120) + '-01' AS DATETIME) AND MOIL.ItemTypeEnum = {0} ", ItemCategory);

                            if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager || credential.Designation == EmployeeBL.DesignationEnum.SalesManager
                                            || credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager || credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator)
                            {
                                //commandString.AppendFormat("INNER JOIN F_EmployeeOutletForRpt ({0}) FSC ON O.UID = FSC.OutletUID ", credential.EmployeeUID);
                                    commandString.Append("INNER JOIN DistributorOutlet DO ON O.UID = DO.OutletUID AND DO.ExpiryDate IS NULL ");
                                    commandString.Append("INNER JOIN Distributor DS ON DS.UID = DO.DistributorUID AND DS.ExpiryDate IS NULL AND ISNULL(DS.mpt_TypeEnum,0) <> 1 ");
                                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                                    commandString.Append("INNER JOIN Employee FSC ON DWN.ParentUID = FSC.UID AND FSC.mpt_DesignationEnum = 16 AND FSC.ExpiryDate IS NULL ");
                                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15 AND ASM.ExpiryDate IS NULL ");
                                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6 AND SM.ExpiryDate IS NULL ");
                                
                            }

                            commandString.Append("WHERE D.mpt_TypeEnum = 3 ");

                            if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager)
                                commandString.AppendFormat("AND ASM.UID = {0} ", credential.EmployeeUID);

                            if (credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager)
                                commandString.AppendFormat("AND SM.ParentUID = {0} ", credential.EmployeeUID);

                            if (credential.Designation == EmployeeBL.DesignationEnum.SalesManager)
                                commandString.AppendFormat("AND SM.UID = {0} ", credential.EmployeeUID);

                            if (credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator)
                                commandString.AppendFormat("AND FSC.UID = {0} ", credential.EmployeeUID);

                            commandString.Append("AND MOIL.FinalValue > 0 ");
                            commandString.Append("GROUP BY D.UID " );
                            commandString.Append(",D.Description " );
                            commandString.Append(",D.MidLat " );
                            commandString.Append(",D.MidLng " );

                            commandString.Append("UNION ALL " );

                            commandString.Append("SELECT D.UID AS DistrictUID " );
                            commandString.Append(",D.Description AS District " );
                            commandString.Append(",D.MidLat " );
                            commandString.Append(",D.MidLng " );
                            commandString.Append(",CurrentBalance = 0 " );
                            commandString.Append(",CAST(SUM(ISNULL(MOI.FinalValue,0)) AS INT) AS ReOrderQty " );
                            commandString.Append(",OutletCount = 0 " );

                            if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                            {
                                commandString.Append(",OutletOutOfStockCount = SUM(CASE WHEN ISNULL(MOI.FinalValue,0) > ISNULL(KK.CurrentBalance,0) THEN 1 ELSE 0 END) ");
                            }
                            else
                                commandString.Append(",OutletOutOfStockCount = SUM(CASE WHEN ISNULL(MOI.FinalValue,0) > ISNULL(MO.BalanceQty,0) THEN 1 ELSE 0 END) ");

                            commandString.Append("FROM Area D " );
                            commandString.Append("LEFT OUTER JOIN Area T ON D.UID = T.ParentUID AND T.mpt_TypeEnum = 4 " );
                            commandString.AppendFormat("LEFT OUTER JOIN Outlet O ON T.UID = O.AreaUID AND O.ExpiryDate IS NULL AND ({0} = -1 OR O.mpt_TypeEnum = {0}) ", isvoucheronly);
                            commandString.AppendFormat("LEFT OUTER JOIN OutletROL MOI ON O.UID = MOI.OutletUID AND MOI.Month = CAST(Convert(VARCHAR(7),GETDATE(),120) + '-01' AS DATETIME) AND MOI.ItemTypeEnum = {0} ",ItemCategory);

                            if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                            {
                                commandString.Append("LEFT OUTER JOIN ( " );
                                commandString.Append("SELECT MO.OutletUID,SUM(MO.BalanceQty * IPL.UnitListPrice) AS CurrentBalance ");
			                    commandString.Append("FROM OutletItem MO " );
				                    commandString.Append("INNER JOIN ItemPriceList IPL ON MO.ItemUID = IPL.ItemUID " );
				                    commandString.Append("INNER JOIN Item I ON MO.ItemUID = I.UID " );
                                    commandString.Append("WHERE  I.mpt_TypeEnum = 3 AND I.ExpiryDate IS NULL AND MO.mpt_TypeEnum = 2 AND IPL.IsActive = 1 AND IPL.PriceListUID = 27 ");
                                commandString.Append("GROUP BY MO.OutletUID ");
                                commandString.Append(")KK ON O.UID = KK.OutletUID ");
                            }
                            else
                                commandString.AppendFormat("LEFT OUTER JOIN OutletItem MO ON O.UID = MO.OutletUID AND MO.mpt_TypeEnum = 1 AND MO.ItemUID = {0} ",ItemCategory );

                            if(credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager || credential.Designation == EmployeeBL.DesignationEnum.SalesManager
                                || credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager || credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator)
                            {
                                //commandString.AppendFormat("INNER JOIN F_EmployeeOutletForRpt ({0}) FSC ON O.UID = FSC.OutletUID ", credential.EmployeeUID);
                                commandString.Append("INNER JOIN DistributorOutlet DO ON O.UID = DO.OutletUID AND DO.ExpiryDate IS NULL ");
                                commandString.Append("INNER JOIN Distributor DS ON DS.UID = DO.DistributorUID AND DS.ExpiryDate IS NULL ");
                                commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                                commandString.Append("INNER JOIN Employee FSC ON DWN.ParentUID = FSC.UID AND FSC.mpt_DesignationEnum = 16 AND FSC.ExpiryDate IS NULL ");
                                commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15 AND ASM.ExpiryDate IS NULL ");
                                commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6 AND SM.ExpiryDate IS NULL ");

                            }

                            commandString.Append("WHERE D.mpt_TypeEnum = 3 " );

                            if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager)
                                commandString.AppendFormat("AND ASM.UID = {0} ", credential.EmployeeUID);

                            if (credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager)
                                commandString.AppendFormat("AND SM.ParentUID = {0} ", credential.EmployeeUID);

                            if (credential.Designation == EmployeeBL.DesignationEnum.SalesManager)
                                commandString.AppendFormat("AND SM.UID = {0} ", credential.EmployeeUID);

                            if (credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator)
                                commandString.AppendFormat("AND FSC.UID = {0} ", credential.EmployeeUID);

                            commandString.Append("AND MOI.FinalValue > 0 ");
                            commandString.Append("GROUP BY D.UID " );
                            commandString.Append(",D.Description " );
                            commandString.Append(",D.MidLat " );
                            commandString.Append(",D.MidLng " );
                            commandString.Append(")KK " );
                            commandString.Append("GROUP BY KK.DistrictUID,KK.District,KK.MidLat,KK.MidLng ");


                connection.Open();
                
                OleDbCommand command = new OleDbCommand(commandString.ToString(), connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);
                command.CommandTimeout = 0;
                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                List<AreaData> list = new List<AreaData>();
                AreaData ad = new AreaData();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    ad.areaUID = Convert.ToInt32(r["DistrictUID"].ToString());
                    ad.Description = r["District"].ToString();
                    GLatLng p = new GLatLng();
                    p.lat = Convert.ToDouble(r["MidLat"].ToString());
                    p.lng = Convert.ToDouble(r["MidLng"].ToString());
                    ad.midPoint = p;
                    ad.currentbalance = Convert.ToInt32(r["CurrentBalance"].ToString());
                    ad.ReorderQty = Convert.ToInt32(r["ReOrderQty"].ToString());
                    ad.totOutlets = Convert.ToInt32(r["OutletCount"].ToString());
                    ad.totOutofStock = Convert.ToInt32(r["OutletOutOfStockCount"].ToString());
                    ad.percentage = Convert.ToDouble(r["Percentage_"]); 
                    list.Add(ad);
                    ad = new AreaData();
                }
                return list;
            }
        }

        public List<AreaData> GetOutletBussinessAreaData(int ItemCategory, UserCredential credential)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                int isvoucheronly = -1;
                if (ItemCategory == (int)ItemBL.TypeEnum.Reload)
                    isvoucheronly = 1;

                //string commandString = "";

                StringBuilder commandString = new StringBuilder("SELECT KK.BussinessAreaUID,KK.BussinessArea,KK.MidLat,KK.MidLng,SUM(KK.CurrentBalance) AS CurrentBalance,SUM(KK.ReOrderQty) AS ReOrderQty ");
                commandString.Append(",SUM(OutletCount) AS OutletCount,SUM(OutletOutOfStockCount) AS OutletOutOfStockCount ");
                commandString.Append(",Percentage_ = CAST(CASE WHEN SUM(OutletCount) <> 0 THEN (CAST(SUM(OutletOutOfStockCount) AS DECIMAL(18,2)) / SUM(OutletCount))* 100 ELSE 100 END AS DECIMAL(18,2)) ");
                commandString.Append("FROM ( ");
                commandString.Append("SELECT B.UID AS BussinessAreaUID ");
                commandString.Append(",B.Description AS BussinessArea ");
                commandString.Append(",ISNULL(B.MidLat,0) AS MidLat ");
                commandString.Append(",ISNULL(B.MidLng,0) AS MidLng ");
                commandString.Append(",CAST(SUM(ISNULL(MOI.BalanceQty,0)) AS INT) AS CurrentBalance ");
                commandString.Append(",ReOrderQty = 0 ");
                commandString.Append(",OutletCount = COUNT(DISTINCT O.UID) ");
                commandString.Append(",OutletOutOfStockCount = 0 ");
                commandString.Append("FROM Area B ");
                commandString.Append("INNER JOIN Distributor DS ON DS.BusinessAreaUID = B.UID ");
                commandString.Append("LEFT OUTER JOIN DistributorOutlet DO ON DS.UID = DO.DistributorUID ");
                commandString.AppendFormat("LEFT OUTER JOIN Outlet O ON DO.OutletUID = O.UID AND O.ExpiryDate IS NULL AND ({0} = -1 OR O.mpt_TypeEnum = {0}) ", isvoucheronly);
                commandString.AppendFormat("LEFT OUTER JOIN OutletItemCategory MOI ON O.UID = MOI.OutletUID AND MOI.mpt_ItemTypeEnum = {0} ", ItemCategory);
                commandString.AppendFormat("LEFT OUTER JOIN OutletROL MOIL ON O.UID = MOIL.OutletUID AND MOIL.Month = CAST(Convert(VARCHAR(7),GETDATE(),120) + '-01' AS DATETIME) AND MOIL.ItemTypeEnum = {0} ", ItemCategory);

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager || credential.Designation == EmployeeBL.DesignationEnum.SalesManager
                                || credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager || credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator )
                {
                    //commandString.AppendFormat("INNER JOIN F_EmployeeOutletForRpt ({0}) FSC ON O.UID = FSC.OutletUID ", credential.EmployeeUID);
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON DWN.ParentUID = FSC.UID AND FSC.mpt_DesignationEnum = 16 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15 AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6 AND SM.ExpiryDate IS NULL ");

                }

                else if (credential.Designation == EmployeeBL.DesignationEnum.SalesExecutive)
                {
                    commandString.Append("INNER JOIN Agent AG ON DS.UID = AG.DistributorUID ");
                    commandString.Append("INNER JOIN Agent SE ON AG.ParentUID = SE.UID AND SE.mpt_DesignationEnum = 76 AND SE.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON SE.EmployeeUID = FSC.UID AND FSC.mpt_DesignationEnum = 76 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                }

                commandString.Append("WHERE B.mpt_TypeEnum = 13 AND DO.ExpiryDate IS NULL AND DS.ExpiryDate IS NULL AND ISNULL(DS.mpt_TypeEnum,0) <> 1 ");

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager)
                    commandString.AppendFormat("AND ASM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager)
                    commandString.AppendFormat("AND SM.ParentUID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SalesManager)
                    commandString.AppendFormat("AND SM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.SalesExecutive)
                    commandString.AppendFormat("AND FSC.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                    commandString.AppendFormat("AND DS.UID = {0} ", credential.DistributorUID);

                commandString.Append("AND MOIL.FinalValue > 0 ");
                commandString.Append("GROUP BY B.UID ");
                commandString.Append(",B.Description ");
                commandString.Append(",B.MidLat ");
                commandString.Append(",B.MidLng ");

                commandString.Append("UNION ALL ");

                commandString.Append("SELECT B.UID AS BussinessAreaUID ");
                commandString.Append(",B.Description AS BussinessArea ");
                commandString.Append(",ISNULL(B.MidLat,0) AS MidLat ");
                commandString.Append(",ISNULL(B.MidLng,0) AS MidLng ");
                commandString.Append(",CurrentBalance = 0 ");
                commandString.Append(",CAST(SUM(ISNULL(MOI.FinalValue,0)) AS INT) AS ReOrderQty ");
                commandString.Append(",OutletCount = 0 ");

                if (ItemCategory == (int)ItemBL.TypeEnum.Voucher)
                {
                    commandString.Append(",OutletOutOfStockCount = SUM(CASE WHEN ISNULL(MOI.FinalValue,0) > ISNULL(MO.BalanceQtyValue,0) THEN 1 ELSE 0 END) ");
                }
                else
                    commandString.Append(",OutletOutOfStockCount = SUM(CASE WHEN ISNULL(MOI.FinalValue,0) > ISNULL(MO.BalanceQty,0) THEN 1 ELSE 0 END) ");

                commandString.Append("FROM Area B ");
                commandString.Append("INNER JOIN Distributor DS ON DS.BusinessAreaUID = B.UID ");
                commandString.Append("LEFT OUTER JOIN DistributorOutlet DO ON DS.UID = DO.DistributorUID ");
                commandString.AppendFormat("LEFT OUTER JOIN Outlet O ON DO.OutletUID = O.UID AND O.ExpiryDate IS NULL AND ({0} = -1 OR O.mpt_TypeEnum = {0}) ", isvoucheronly);
                commandString.AppendFormat("LEFT OUTER JOIN OutletROL MOI ON O.UID = MOI.OutletUID AND MOI.Month = CAST(Convert(VARCHAR(7),GETDATE(),120) + '-01' AS DATETIME) AND MOI.ItemTypeEnum = {0} ", ItemCategory);

                commandString.AppendFormat("LEFT OUTER JOIN OutletItemCategory MO ON O.UID = MO.OutletUID AND MO.mpt_ItemTypeEnum = {0} ", ItemCategory);

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager || credential.Designation == EmployeeBL.DesignationEnum.SalesManager
                    || credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager || credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator)
                {
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON DWN.ParentUID = FSC.UID AND FSC.mpt_DesignationEnum = 16 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15 AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6 AND SM.ExpiryDate IS NULL ");
                }

                else if (credential.Designation == EmployeeBL.DesignationEnum.SalesExecutive)
                {
                    commandString.Append("INNER JOIN Agent AG ON DS.UID = AG.DistributorUID ");
                    commandString.Append("INNER JOIN Agent SE ON AG.ParentUID = SE.UID AND SE.mpt_DesignationEnum = 76 AND SE.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee DWN ON DS.emp_OwnerUID = DWN.UID AND DWN.mpt_DesignationEnum = 2 AND DWN.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee FSC ON SE.EmployeeUID = FSC.UID AND FSC.mpt_DesignationEnum = 76 AND FSC.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee ASM ON FSC.ParentUID = ASM.UID AND ASM.mpt_DesignationEnum = 15  AND ASM.ExpiryDate IS NULL ");
                    commandString.Append("INNER JOIN Employee SM ON ASM.ParentUID = SM.UID AND SM.mpt_DesignationEnum = 6  AND SM.ExpiryDate IS NULL ");
                }

                commandString.Append("WHERE B.mpt_TypeEnum = 13 AND DO.ExpiryDate IS NULL AND DS.ExpiryDate IS NULL AND ISNULL(DS.mpt_TypeEnum,0) <> 1 ");

                if (credential.Designation == EmployeeBL.DesignationEnum.AssistantSalesManager)
                    commandString.AppendFormat("AND ASM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SeniorSalesManager)
                    commandString.AppendFormat("AND SM.ParentUID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.SalesManager)
                    commandString.AppendFormat("AND SM.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.FieldSalesCordinator || credential.Designation == EmployeeBL.DesignationEnum.SalesExecutive)
                    commandString.AppendFormat("AND FSC.UID = {0} ", credential.EmployeeUID);

                if (credential.Designation == EmployeeBL.DesignationEnum.DistributorOperator)
                    commandString.AppendFormat("AND DS.UID = {0} ", credential.DistributorUID);

                commandString.Append("GROUP BY B.UID ");
                commandString.Append(",B.Description ");
                commandString.Append(",B.MidLat ");
                commandString.Append(",B.MidLng ");
                commandString.Append(")KK ");
                commandString.Append("GROUP BY KK.BussinessAreaUID,KK.BussinessArea,KK.MidLat,KK.MidLng ");

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString.ToString(), connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                List<AreaData> list = new List<AreaData>();
                AreaData ad = new AreaData();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    ad.areaUID = Convert.ToInt32(r["BussinessAreaUID"].ToString());
                    ad.Description = r["BussinessArea"].ToString();
                    GLatLng p = new GLatLng();
                    p.lat = Convert.ToDouble(r["MidLat"].ToString());
                    p.lng = Convert.ToDouble(r["MidLng"].ToString());
                    ad.midPoint = p;
                    ad.currentbalance = Convert.ToInt32(r["CurrentBalance"].ToString());
                    ad.ReorderQty = Convert.ToInt32(r["ReOrderQty"].ToString());
                    ad.totOutlets = Convert.ToInt32(r["OutletCount"].ToString());
                    ad.totOutofStock = Convert.ToInt32(r["OutletOutOfStockCount"].ToString());
                    ad.percentage = Convert.ToDouble(r["Percentage_"]);
                    list.Add(ad);
                    ad = new AreaData();
                }
                return list;
            }
        }

        public List<AreaData> GetAreas(int mpt_TypeEnum)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                        "SELECT     dbo.AreaCoordinate.UID, dbo.AreaCoordinate.AreaUID, dbo.AreaCoordinate.SeqNumber, dbo.AreaCoordinate.Latitude, dbo.AreaCoordinate.Longitude, dbo.Area.Color " +
                        "FROM         dbo.AreaCoordinate INNER JOIN " +
                        "dbo.Area ON dbo.AreaCoordinate.AreaUID = dbo.Area.UID " +
                        "WHERE     (dbo.Area.mpt_TypeEnum = " + mpt_TypeEnum + ") AND (dbo.Area.MidLat IS NOT NULL) " +
                        "ORDER BY AreaCoordinate.AreaUID, AreaCoordinate.SeqNumber";

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                //List<List<GLatLng>> list = new List<List<GLatLng>>();
                List<AreaData> list = new List<AreaData>();
                AreaData ad = new AreaData();
                List<GLatLng> points = new List<GLatLng>();
                bool isfirst = true;
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    if (!isfirst && Convert.ToInt32(r["SeqNumber"].ToString()) == 0)
                    {
                        list.Add(ad);
                        points = new List<GLatLng>();
                        ad = new AreaData();
                    }
                    isfirst = false;
                    GLatLng p = new GLatLng();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lng = Convert.ToDouble(r["Longitude"].ToString());
                    points.Add(p);
                    ad.areaUID = Convert.ToInt32(r["AreaUID"].ToString());
                    ad.color = r["Color"].ToString();
                    ad.listCrdnts = points;
                }
                if (!isfirst)
                    list.Add(ad);
                return list;
            }
        }

        public List<AreaData> GetDistrictAreas(int mpt_TypeEnum)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =
                        "SELECT     dbo.AreaCoordinate.UID, dbo.AreaCoordinate.AreaUID, dbo.AreaCoordinate.SeqNumber, dbo.AreaCoordinate.Latitude, dbo.AreaCoordinate.Longitude, dbo.Area.Color " +
                        "FROM         dbo.AreaCoordinate INNER JOIN " +
                        "dbo.Area ON dbo.AreaCoordinate.AreaUID = dbo.Area.UID " +
                        "WHERE     (dbo.Area.mpt_TypeEnum = " + mpt_TypeEnum + ") AND (dbo.Area.MidLat IS NOT NULL) " +
                        "ORDER BY AreaCoordinate.AreaUID, AreaCoordinate.SeqNumber";

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                //List<List<GLatLng>> list = new List<List<GLatLng>>();
                List<AreaData> list = new List<AreaData>();
                AreaData ad = new AreaData();
                List<location> points = new List<location>();
                bool isfirst = true;
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    if (!isfirst && Convert.ToInt32(r["SeqNumber"].ToString()) == 0)
                    {
                        list.Add(ad);
                        points = new List<location>();
                        ad = new AreaData();
                    }
                    isfirst = false;
                    location p = new location();
                    p.lat = Convert.ToDouble(r["Latitude"].ToString());
                    p.lon = Convert.ToDouble(r["Longitude"].ToString());
                    points.Add(p);
                    ad.areaUID = Convert.ToInt32(r["AreaUID"].ToString());
                    ad.color = r["Color"].ToString();
                    ad.locations = points;
                }
                if (!isfirst)
                    list.Add(ad);
                return list;
            }
        }

        public List<AreaData> GetDistrictsData(string rptName)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString = "";
                if (rptName == "SimStatus")
                {
                    commandString =
                            "SELECT     Area_1.UID, Area_1.Description, Area_1.MidLat, Area_1.MidLng, ISNULL(TSimS.SimCount, 0) AS SimCount " +
                            "FROM         (SELECT     COUNT(*) AS SimCount, Area_2.ParentUID " +
                            "FROM          dbo.TxnSimStatus INNER JOIN " +
                                                  "dbo.Outlet AS Outlet_1 ON dbo.TxnSimStatus.OutletUID = Outlet_1.UID INNER JOIN " +
                                                  "dbo.Area AS Area_2 ON Outlet_1.AreaUID = Area_2.UID " +
                            "GROUP BY Area_2.ParentUID) AS TSimS RIGHT OUTER JOIN " +
                            "dbo.Area AS Area_1 ON TSimS.ParentUID = Area_1.UID " +
                            "GROUP BY ISNULL(TSimS.SimCount, 0), Area_1.UID, Area_1.Description, Area_1.mpt_TypeEnum, Area_1.MidLat, Area_1.MidLng " +
                            "HAVING      (Area_1.mpt_TypeEnum = 3)";
                }
                else if (rptName == "CardStatus")
                {
                    commandString =
                        "SELECT     Area_1.UID, Area_1.Description, Area_1.MidLat, Area_1.MidLng, ISNULL(TCardS.CardCount, 0) AS CardCount " +
                        "FROM         (SELECT     COUNT(*) AS CardCount, Area_2.ParentUID " +
                        "FROM          dbo.TxnCardStatus INNER JOIN " +
                                              "dbo.Outlet AS Outlet_1 ON dbo.TxnCardStatus.OutletUID = Outlet_1.UID INNER JOIN " +
                                              "dbo.Area AS Area_2 ON Outlet_1.AreaUID = Area_2.UID " +
                        "GROUP BY Area_2.ParentUID) AS TCardS RIGHT OUTER JOIN " +
                        "dbo.Area AS Area_1 ON TCardS.ParentUID = Area_1.UID " +
                        "GROUP BY ISNULL(TCardS.CardCount, 0), Area_1.UID, Area_1.Description, Area_1.mpt_TypeEnum, Area_1.MidLat, Area_1.MidLng " +
                        "HAVING      (Area_1.mpt_TypeEnum = 3)";
                }
                else if (rptName == "ReloadStatus")
                {
                    commandString =
                        "SELECT     Area_1.UID, Area_1.Description, Area_1.MidLat, Area_1.MidLng, ISNULL(TReloadS.ReloadCount, 0) AS ReloadCount " +
                        "FROM         (SELECT     COUNT(*) AS ReloadCount, Area_2.ParentUID " +
                        "FROM          dbo.TxnReloadStatus INNER JOIN " +
                                              "dbo.Outlet AS Outlet_1 ON dbo.TxnReloadStatus.OutletUID = Outlet_1.UID INNER JOIN " +
                                              "dbo.Area AS Area_2 ON Outlet_1.AreaUID = Area_2.UID " +
                        "GROUP BY Area_2.ParentUID) AS TReloadS RIGHT OUTER JOIN " +
                        "dbo.Area AS Area_1 ON TReloadS.ParentUID = Area_1.UID " +
                        "GROUP BY ISNULL(TReloadS.ReloadCount, 0), Area_1.UID, Area_1.Description, Area_1.mpt_TypeEnum, Area_1.MidLat, Area_1.MidLng " +
                        "HAVING      (Area_1.mpt_TypeEnum = 3)";
                }

                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                List<AreaData> list = new List<AreaData>();
                AreaData ad = new AreaData();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    ad.areaUID = Convert.ToInt32(r["UID"].ToString());
                    ad.Description = r["Description"].ToString();
                    GLatLng p = new GLatLng();
                    p.lat = Convert.ToDouble(r["MidLat"].ToString());
                    p.lng = Convert.ToDouble(r["MidLng"].ToString());
                    ad.midPoint = p;
                    if (rptName == "SimStatus")
                        ad.simCount = Convert.ToInt32(r["SimCount"].ToString());
                    else if (rptName == "CardStatus")
                        ad.cardCount = Convert.ToInt32(r["CardCount"].ToString());
                    else if (rptName == "ReloadStatus")
                        ad.reloadCount = Convert.ToInt32(r["ReloadCount"].ToString());
                    list.Add(ad);
                    ad = new AreaData();
                }
                return list;
            }
        }
        #endregion

        public static List<GISINfo> GetBusinessOutletInfo(int areaUID)
        {
            VantageEntities db = new VantageEntities();
            //var data = db.OutletInfoGISBusiness(areaUID);
            List<GISINfo> list = new List<GISINfo>();
            List<OutletInfoGISBusiness_Result> l = db.OutletInfoGISBusiness(areaUID).ToList();
            foreach (OutletInfoGISBusiness_Result outlet in l)
            {
                GISINfo ou = new GISINfo();
                ou.Id = outlet.ID;
                ou.description = outlet.Name;
                location point = new location();
                point.lat = Convert.ToDouble(outlet.Latitude);
                point.lon = Convert.ToDouble(outlet.Longitude);
                ou.location = point;
                ou.address = outlet.address;
                ou.contact = outlet.Telephone;
                ou.dealer = outlet.Dealer;
                ou.DSRNumber = outlet.DSRNumber.ToString();
                ou.OpDistrict = outlet.OperationalDistrict;
                list.Add(ou);
            }
            return list;
        }

        public static List<GISINfo> GetOutletINfo(int areaUID)
        {
            VantageEntities db = new VantageEntities();
            //var data = db.OutletInfoGIS(areaUID);
            List<GISINfo> list = new List<GISINfo>();
            List<OutletInfoGIS_Result> l = db.OutletInfoGIS(areaUID).ToList();
            foreach (OutletInfoGIS_Result outlet in l)
            {
                GISINfo ou = new GISINfo();
                ou.Id = outlet.ID;
                ou.description = outlet.Name;
                GLatLng point = new GLatLng();
                point.lat = Convert.ToDouble(outlet.Latitude);
                point.lng = Convert.ToDouble( outlet.Longitude);

                ou.address = outlet.StreetAddress;
                ou.contact = outlet.Telephone1;
                ou.dealer = outlet.DistributorName;
                ou.DSRNumber = outlet.DSR;
                ou.OpDistrict = outlet.OperationalDistrict;

                ou.point = point;
                list.Add(ou);
            }
            return list;
        }

        public static int GetAreaDepth(int p)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString;
                int? depth = null;

                commandString = string.Format(
                             "SELECT mpt_TypeEnum " +
                             "FROM Area " +
                             "WHERE UID = {0}"
                            , p);


                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                object obj = command.ExecuteScalar();

                if (obj != null && obj != DBNull.Value)
                    depth = Convert.ToInt32(obj);

                connection.Close();

                return (int)depth;
            }
        }

        public static List<AreaData> GetAllBusinessAreas()
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString =String.Format(
                        " SELECT A.UID as BusinessAreaUID,A.Description, D.UID as DisUID ,D.Name , D.TLDNumber " +
                        " FROM   Area A " +
                        " INNER JOIN Distributor D ON A.UID = D.BusinessAreaUID " +
                        " WHERE  A.mpt_TypeEnum = {0} AND A.ExpiryDate IS  NULL AND A.MidLat IS NOT NULL",(int)AreaBL.TypeEnum.BusinessArea3);
                       
                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();              
                List<AreaData> list = new List<AreaData>();
                AreaData ad = null;             
               
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    ad = new AreaData();
                    ad.areaUID = Convert.ToInt32(r["BusinessAreaUID"].ToString());
                    ad.Description = r["Description"].ToString();
                    ad.distributorName = r["Name"].ToString();
                    ad.TLDNumber = r["TLDNumber"].ToString();
                    ad.distributorUID = Convert.ToInt32(r["DisUID"].ToString());
                    list.Add(ad);
                }
                return list;
            }
        }

        /// <summary>
        /// Delete Area Points
        /// </summary>
        /// <param name="uid"></param>
        public int DeleteArea(int uid)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                OleDbCommand command = new OleDbCommand();
                // OleDbTransaction transaction = null;
                command.Connection = connection;
                try
                {
                    connection.Open();
                    command.Connection = connection;
                    command.CommandText = string.Format(
                           " DELETE FROM AreaCoordinate " +
                            "WHERE AreaUID = {0}", uid);
                    // Execute the commands.
                    command.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    try
                    {
                        // transaction.Rollback();
                    }
                    catch
                    {
                        // Do nothing here; transaction is not active.
                    }
                }
            }
            return 1;
        }

        public static AreaData GetBusinessArea(int distributorUID)
        {
            int? areaUID = null;
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                StringBuilder strbld = new StringBuilder();
                strbld.Append("SELECT A.Description,A.UID FROM Area A ");
                strbld.Append("INNER JOIN Distributor D ON A.UID = D.BusinessAreaUID ");
                strbld.AppendFormat("WHERE D.UID = {0}", distributorUID);                           
                connection.Open();

                OleDbCommand command = new OleDbCommand(strbld.ToString(), connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                connection.Close();

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");
                AreaData ad = new AreaData();

                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    ad = new AreaData();
                    ad.areaUID = Convert.ToInt32(r["UID"].ToString());
                    ad.Description = r["Description"].ToString();  
                    
                }

                //------------------------------------------------------------------
                string commandStringArea = String.Format(
                  " SELECT D.Name,D.TLDNumber,isnull(D.emp_OwnerUID,0)AS emp_OwnerUID " +
                  " FROM Distributor D" +
                  " WHERE D.BusinessAreaUID = {0}  AND D.ExpiryDate IS NULL ", ad.areaUID);

                connection.Open();

                command = new OleDbCommand(commandStringArea, connection);
                dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSetArea = new DataSet();
                dataAdapter.Fill(dataSetArea, "t");

                connection.Close();

                foreach (DataRow r in dataSetArea.Tables[0].Rows)
                {                  
                    ad.Owner_UID = Convert.ToInt32(r["emp_OwnerUID"].ToString());
                    ad.TLDNumber = r["TLDNumber"].ToString();
                }
                return ad;
            }
        }
        public static string GetColor(int P)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString;
                string Color = null;

                commandString = string.Format(
                             "SELECT Color " +
                             "FROM Area " +
                             "WHERE UID = {0}"
                            , P);
                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                object obj = command.ExecuteScalar();

                if (obj != null && obj != DBNull.Value)
                    Color = Convert.ToString(obj);

                connection.Close();
                return Color;
            }
        }

        public static int GetZoomlevel(int P)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString;
                int ZomLvl = 0;
                commandString = string.Format(
                             "SELECT ZoomLvl " +
                             "FROM Area " +
                             "WHERE UID = {0}"
                            , P);
                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                object obj = command.ExecuteScalar();

                if (obj != null && obj != DBNull.Value)
                    ZomLvl = Convert.ToInt32(obj);

                connection.Close();

                return ZomLvl;
            }
        }

        public static location GetMidPoint(int p)
        {
            using (OleDbConnection connection = new OleDbConnection(ApplicationDefault.ConnectionString))
            {
                string commandString;
                commandString = string.Format(
                             "SELECT MidLat,MidLng " +
                             "FROM Area " +
                             "WHERE UID = {0}"
                            , p);
                connection.Open();

                OleDbCommand command = new OleDbCommand(commandString, connection);
                OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command);

                DataSet dataSet = new DataSet();
                dataAdapter.Fill(dataSet, "t");

                connection.Close();
                location point = new location();
                foreach (DataRow r in dataSet.Tables[0].Rows)
                {
                    if (r["MidLat"].ToString() != string.Empty)
                    {
                        point.lat = Convert.ToDouble(r["MidLat"].ToString());
                        point.lon = Convert.ToDouble(r["MidLng"].ToString());
                    }
                }
                return point;
            }
        }

    }

    public class AreaData
    {
        public int areaUID { get; set; }
        public int parentUID { get; set; }
        public int currentbalance { get; set; }
        public int ReorderQty { get; set; }
        public string Description { get; set; }
        public string color { get; set; }
        public List<GLatLng> listCrdnts { get; set; }
        public int zoomLvl { get; set; }
        public GLatLng midPoint { get; set; }
        public int empUID { get; set; }
        public int distributorUID { get; set; }
        public string distributorName { get; set; }
        public location location { get; set; }
        public List<location> locations { get; set; }   
        
        public int simCount { get; set; }
        public int cardCount { get; set; }
        public int reloadCount { get; set; }
        public int Owner_UID { get; set; }
        public string TLDNumber { get; set; }

        public int totOutlets { get; set; }
        public int totOutofStock { get; set; }
        public double percentage { get; set; }
    }

    public class GISINfo
    {
        public String Id { get; set; }
        public string description { get; set; }
        public GLatLng point { get; set; }
        public String address { get; set; }
        public String contact { get; set; }
        public String dealer { get; set; }
        public String OpDistrict { get; set; }
        public String DSRNumber { get; set; }
        public location location { get; set; }
       
    }

    public class MapData
    {
        public int AreaUID { get; set; }
        public List<GLatLng> points { get; set; }
        public string color { get; set; }
    }
    public class location
    {
        public double lat { get; set; }
        public double lon { get; set; }

    }

    public class OutletData
    {
        public int outletUID { get; set; }
        public string ID { get; set; }
        public string Area { get; set; }
        public int areaUID { get; set; }
        public string name { get; set; }
        public string Address { get; set; }
        public GLatLng point { get; set; }
        public string TLRNumber { get; set; }
        public string DSRnumber { get; set; }
        public string Telephone1 { get; set; }
        public string Telephone2 { get; set; }
        public string Description { get; set; }
        public int reorder_Level { get; set; }
        public string dealerName { get; set; }

        public int type { get; set; }

        public decimal curentbalance { get; set; }
        public int outletstatus { get; set; }
        public int reorderqty { get; set; } 

        public int simCount { get; set; }
        public double simValue { get; set; }

        public int cardCount { get; set; }
        public double CardValue { get; set; }

        public int reloadCount { get; set; }
        public double reloadValue{ get; set; }

        public int bundleItemCount { get; set; }
        public int deviceCount { get; set; }

        public int voucherqty { get; set; }
        public double voucherValue { get; set; }   
                     
        public int voucherReorderQty { get; set; }
        public int simReorderQty { get; set; }
        public int reloarReOrderQty { get; set; }
        public int bundleItemReOrderQty { get; set; }
        public int DeviceReOrderQty { get; set; }

        public string CapturedBy { get; set; }
        public string DealerName { get; set; }
        public string DSR { get; set; }
        public string OperationalDistrict { get; set; }
        public string LastDSRVisit { get; set; }

        public location location { get; set; }

    }
    public class AgentData
    {
        public int AgentUID { get; set; }
        public int SeqNo { get; set; }
        public string CallID { get; set; }
        public string Notes { get; set; } 
        public GLatLng Location { get; set; }
        public DateTime datetime { get; set; }
        public GLatLng midPoint { get; set; }
        public List<OutletData> VisitData { get; set; }

    }
}
