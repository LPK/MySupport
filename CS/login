using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Transactions;

namespace Vantage.BusinessLogicLayer
{
    public class LoginBL
    {
        [Flags]
        public enum PasswordRules
        {
            /// <summary>
            /// Password must contain a digit
            /// </summary>
            Digit = 1,
            /// <summary>
            /// Password must contain an uppercase letter
            /// </summary>
            UpperCase = 2,
            /// <summary>
            /// Password must contain a lowercase letter
            /// </summary>
            LowerCase = 4,
            /// <summary>
            /// Password must have both upper and lower case letters
            /// </summary>
            //MixedCase = 6,
            /// <summary>
            /// Password must include a non-alphanumeric character
            /// </summary>
            SpecialChar = 8,
            /// <summary>
            /// All rules should be checked
            /// </summary>
            All = 15,
            /// <summary>
            /// No rules should be checked
            /// </summary>
            //None = 0
        }

        public UserCredential Verify_LO(String username, String password, String IPAddress, ref string passwordPolicyMsg)
        {
            UserCredential credential = null;

            using (VantageEntities context = new VantageEntities())
            {
                string passwordHash = MD2Encryption.GetEncryptedText(password);

                var logininfo = (from lo in context.avLogin
                                 where lo.ExpiryDate == null
                                      && lo.ID == username
                                      && lo.PasswordHash == passwordHash
                                 select new
                                 {
                                     lo.UID,
                                     lo.AccessMask,
                                     lo.BusinessUserUID,
                                     lo.ExpiryDate,
                                     lo.IsDisabled,
                                     lo.PasswordChangedDate,
                                 }).SingleOrDefault();

                if (logininfo == null || logininfo.ExpiryDate != null || logininfo.IsDisabled || !logininfo.BusinessUserUID.HasValue || logininfo.AccessMask < (byte)EmployeeBL.DesignationEnum.DistributorOperator)
                    return null;

                var agentinfo = (from a in context.Agent
                                 where a.UID == logininfo.BusinessUserUID
                                 select new
                                 {
                                     a.UID,
                                     a.EmployeeUID,
                                     a.DistributorUID,
                                     a.ExpiryDate
                                 }).FirstOrDefault();

                if (agentinfo != null && agentinfo.ExpiryDate != null)
                    throw new Exception("User has been deactivated in the system.");

                if (agentinfo == null || agentinfo.ExpiryDate != null || !agentinfo.EmployeeUID.HasValue)
                {                   
                    return null;
                }
                   

                var empinfo = (from e in context.Employee
                               where e.UID == agentinfo.EmployeeUID
                               select new
                               {
                                   e.UID,
                                   e.ExpiryDate,
                                   e.FirstName,
                                   e.LastName,
                                   e.mpt_ChannelUID,
                               }).FirstOrDefault();

                if (empinfo != null && empinfo.ExpiryDate != null)
                    throw new Exception("Employee has been deactivated in the system.");

                if (empinfo == null || empinfo.ExpiryDate != null)
                {                   
                    return null;
                }

                // check password policy requirment
                var appParam = (from ap in context.ApplicationParams
                                select new
                                {
                                    ap.PasswordValidityPeriod
                                }).First();

                EmployeeBL.DesignationEnum designation = (EmployeeBL.DesignationEnum)logininfo.AccessMask;
                if (appParam.PasswordValidityPeriod.HasValue && appParam.PasswordValidityPeriod.Value > 0 && logininfo.PasswordChangedDate.HasValue)
                {
                    TimeSpan timeSpan = DateTime.Now.Date.Subtract(logininfo.PasswordChangedDate.Value);
                    int daysToExpire = appParam.PasswordValidityPeriod.Value - timeSpan.Days;

                    if (designation != EmployeeBL.DesignationEnum.SystemAdministrator)
                    {
                        if (daysToExpire <= 0)
                            throw new Exception("your password expired! Please contact System Administrator for new password.");
                        else if (daysToExpire == 1)
                            passwordPolicyMsg = "Your password expires today! Please change your password.";
                        else if (daysToExpire < 10)
                            passwordPolicyMsg = "Your password will expire in " + daysToExpire + " days! Please change your password.";
                        else passwordPolicyMsg = null;
                    }
                }

                credential = new UserCredential();
                credential.LoginUID = logininfo.UID;
                credential.AgentUID = agentinfo.UID;
                credential.EmployeeUID = empinfo.UID;
                credential.ChannelUID = empinfo.mpt_ChannelUID;
                credential.DistributorUID = agentinfo.DistributorUID;

                if (credential.DistributorUID.HasValue)
                {
                    var distinfo = (from d in context.Distributor
                                    where d.UID == credential.DistributorUID
                                    select new
                                    {
                                        d.Name,
                                        d.PriceListUID1,
                                    }).First();

                    credential.Distributor = distinfo.Name;
                    credential.PriceListUID1 = distinfo.PriceListUID1;
                }

                credential.Designation = (EmployeeBL.DesignationEnum)logininfo.AccessMask;

                AuthProfile profile = GetByProfileByDesignation((byte)credential.Designation, credential.ChannelUID);
                if (profile != null)
                {
                    credential.ProfileUID = profile.UID;
                    credential.HelpFileFolderName = profile.HelpFileFolderName;
                }
                credential.Username = username;
                credential.Fullname = empinfo.FirstName + " " + empinfo.LastName;
                credential.Locked = logininfo.IsDisabled;

                // Site
                //credential.SiteUID = 0;
                //var site0 = (from s in context.avSite
                //             where s.UID == 0
                //             select new { s.UID }
                //           ).FirstOrDefault();

                //if (site0 == null) // distributor location
                //{
                //    var siteinfo = (from s in context.avSite
                //                    where s.ID == username && s.IsActive == true
                //                    select new
                //                    {
                //                        s.UID
                //                    }).First();

                //    credential.SiteUID = siteinfo.UID;
                //}

                // set default pricelist
                credential.PriceListUID3 = context.PriceList.First(p => p.mpt_TypeEnum == (byte)PriceBookBL.TypeEnum.MRP).UID;
                if (credential.DistributorUID.HasValue)
                    credential.PriceListUID1 = context.Distributor.First(p => p.UID == credential.DistributorUID).PriceListUID1;

                LoginHistory lh = new LoginHistory();
                lh.LoginUID = credential.LoginUID;
                lh.Type = "IN";
                lh.IPAddress = IPAddress;
                lh.CreationDate = DateTime.Now;

                context.LoginHistory.AddObject(lh);
                context.SaveChanges();

                return credential;
            }
        }

        public static void ChangePassword_LO(string username, string oldPasswordHash, string newPasswordHash)
        {
            using (VantageEntities context = new VantageEntities())
            {
                int? loginUID = null;
                oldPasswordHash = MD2Encryption.GetEncryptedText(oldPasswordHash);

                avLogin login = (from lo in context.avLogin
                                 where lo.ExpiryDate == null
                                      && lo.ID == username
                                      && lo.PasswordHash == oldPasswordHash
                                 select lo).SingleOrDefault();

                if (login != null)
                {
                    loginUID = login.UID;

                    #region ...
                    var appParam = (from ap in context.ApplicationParams
                                    select new
                                    {
                                        ap.PasswordRule_All,
                                        ap.PasswordRule_Digit,
                                        ap.PasswordRule_LowerCase,
                                        ap.PasswordRule_None,
                                        ap.PasswordRule_SpecialChar,
                                        ap.PasswordRule_UpperCase,
                                        ap.RequiredPasswordLength
                                    }).First();

                    if (appParam.RequiredPasswordLength.HasValue
                        && appParam.RequiredPasswordLength.Value > 0
                        && newPasswordHash.Length < appParam.RequiredPasswordLength)
                        throw new Exception("Password do not match with system policy requirement. Password length should be equal or greater than " + appParam.RequiredPasswordLength + " characters");

                    if (appParam.PasswordRule_All.HasValue && appParam.PasswordRule_All.Value)
                        if (!LoginBL.IsPasswordValid_LO(newPasswordHash, LoginBL.PasswordRules.All, null))
                            throw new Exception("Password do not match with system policy requirement. Password must have at least one digit, lower case character, upper case character & symbol!");

                    if (appParam.PasswordRule_Digit.HasValue && appParam.PasswordRule_Digit.Value)
                        if (!LoginBL.IsPasswordValid_LO(newPasswordHash, LoginBL.PasswordRules.Digit, null))
                            throw new Exception("Password do not match with system policy requirement. Password must have at least one digit!");

                    if (appParam.PasswordRule_LowerCase.HasValue && appParam.PasswordRule_LowerCase.Value)
                        if (!LoginBL.IsPasswordValid_LO(newPasswordHash, LoginBL.PasswordRules.LowerCase, null))
                            throw new Exception("Password do not match with system policy requirement. Password must have at least one lower case character!");

                    if (appParam.PasswordRule_UpperCase.HasValue && appParam.PasswordRule_UpperCase.Value)
                        if (!LoginBL.IsPasswordValid_LO(newPasswordHash, LoginBL.PasswordRules.UpperCase, null))
                            throw new Exception("Password do not match with system policy requirement. Password must have at least one upper case character!");

                    if (appParam.PasswordRule_SpecialChar.HasValue && appParam.PasswordRule_SpecialChar.Value)
                        if (!LoginBL.IsPasswordValid_LO(newPasswordHash, LoginBL.PasswordRules.SpecialChar, null))
                            throw new Exception("Password do not match with system policy requirement. Password must have at least one special character!");

                    newPasswordHash = MD2Encryption.GetEncryptedText(newPasswordHash);

                    var pwInfo = (from ap in context.ApplicationParams
                                  select new
                                  {
                                      ap.PreviousPasswordCount
                                  }).FirstOrDefault();

                    if (pwInfo != null && pwInfo.PreviousPasswordCount.HasValue && pwInfo.PreviousPasswordCount > 0)
                    {
                        byte previousPasswordCount = pwInfo.PreviousPasswordCount.Value;

                        var pwHistory = (from ph in context.PasswordHistory
                                         where ph.LoginUID == loginUID.Value
                                         orderby ph.PasswordChangedDate descending
                                         select new
                                         {
                                             ph.PasswordHash
                                         }).Take(previousPasswordCount);

                        foreach (var pw in pwHistory)
                            if (pw.PasswordHash.Equals(newPasswordHash))
                                throw new Exception("Password do not match with system policy requirment. Because you cannot use previous " + previousPasswordCount + " password(s).");
                    }

                    #endregion

                    login.PasswordHash = newPasswordHash;
                    login.PasswordChangedDate = DateTime.Now;
                    login.LastModifiedDate = DateTime.Now;
                    login.LastModifiedBy = username;

                    // create history record
                    PasswordHistory passwordHistory = new PasswordHistory();

                    passwordHistory.SiteUID = 0;
                    passwordHistory.LoginUID = login.UID;
                    passwordHistory.AgentUID = login.BusinessUserUID.Value;
                    passwordHistory.EmployeeUID = login.EmployeeUID;
                    passwordHistory.PasswordHash = newPasswordHash;
                    passwordHistory.PasswordChangedDate = DateTime.Now;

                    context.PasswordHistory.AddObject(passwordHistory);

                    context.SaveChanges();
                }
                else
                    throw new Exception("Incorrect username/password.");
            }

        }

        public static void SendPassword_LO(string username)
        {
            using (VantageEntities context = new VantageEntities())
            {
                var logininfo = (from l in context.avLogin
                                 join ag in context.Agent on l.BusinessUserUID equals ag.UID
                                 join em in context.Employee on ag.EmployeeUID equals em.UID
                                 where l.ID == username
                                 select new
                                 {
                                     l.UID,
                                     l.BusinessUserUID,
                                     em.Email
                                 }).FirstOrDefault();

                if (logininfo != null)
                {
                    if (String.IsNullOrEmpty(logininfo.Email))
                        throw new Exception("Email not set.");

                    string password = new Random().Next(99999).ToString();

                    string newPasswordHash = MD2Encryption.GetEncryptedText(password);

                    using (TransactionScope ts = new TransactionScope())
                    {
                        avLogin login = context.avLogin.First(p => p.UID == logininfo.UID);
                        login.PasswordHash = newPasswordHash;
                        login.PasswordChangedDate = null;
                        login.LastModifiedDate = DateTime.Now;
                        login.LastModifiedBy = "$sys$";

                        var agentinfo = (from ag in context.Agent
                                         where ag.UID == logininfo.BusinessUserUID
                                         select new
                                         {
                                             ag.ID,
                                             ag.FirstName
                                         }).FirstOrDefault();

                        string bodyText = "Temporary password : " + password;

                        string cmdTxt = "INSERT INTO _ALERT_EMAIL(ID, Recipients, Subject, Body, IsNew, IsSMS, CreationDate, LastModifiedBy) " +
                            "VALUES('PASSWORD_EMAIL', '" + logininfo.Email + "', 'Password Changed', '" + bodyText + "', 1, 0, GETDATE(), '$sys')";

                        context.ExecuteStoreCommand(cmdTxt);

                        context.SaveChanges();
                        ts.Complete();
                    }
                }
                else
                    throw new Exception("Username not found.");
            }
        }

        public static bool IsFirstLogin(UserCredential credential)
        {
            using (VantageEntities context = new VantageEntities())
            {
                avLogin login = (from lo in context.avLogin
                                 where lo.BusinessUserUID == credential.AgentUID
                                 select lo).First();

                if (!login.PasswordChangedDate.HasValue)
                    return true;
                else
                    return false;
            }
        }

        public void Disable_LO(string userName)
        {
            using (VantageEntities context = new VantageEntities())
            {
                avLogin login = (from lo in context.avLogin
                                 where lo.ExpiryDate == null
                                      && lo.ID == userName
                                 select lo).FirstOrDefault();

                if (login != null)
                {
                    login.IsDisabled = true;
                    login.LastModifiedBy = "$sys";
                    login.LastModifiedDate = DateTime.Now;

                    context.SaveChanges();
                }
            }
        }

        public static AuthProfile GetByProfileByDesignation(byte designation, int? channelUID)
        {
            using (VantageEntities context = new VantageEntities())
            {
                var mpt = (from m in context.MultiPurposeTag
                           where m.Type == (byte)MultiPurposeTagBL.TypeEnum.Designation && m.Data == designation
                           orderby m.MiscData
                           select new
                           {
                               m.UID
                           }).FirstOrDefault();

                var profile = (from desh in context.DesignationHierarchy
                               join p in context.AuthProfile on desh.AuthProfileUID equals p.UID into p_join
                               from p in p_join.DefaultIfEmpty()
                               where desh.mpt_DesignationUID == mpt.UID
                               && desh.mpt_ChannelUID == channelUID
                               select p).FirstOrDefault();


                return profile;
            }
        }

        public static int GetUIDByData(EmployeeBL.DesignationEnum type, byte data)
        {
            VantageEntities db = new VantageEntities();

            var mpt = (from m in db.MultiPurposeTag
                       where m.Type == (byte)type
                          && m.Data == data
                       orderby m.MiscData
                       select new
                       {
                           m.UID
                       }).FirstOrDefault();

            return mpt.UID;
        }

        public static bool IsPasswordValid_LO(string password,
                                   PasswordRules rules,
                                   params string[] ruleOutList)
        {
            bool result = true;
            const string lower = "abcdefghijklmnopqrstuvwxyz";
            const string upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const string digits = "0123456789";
            string allChars = lower + upper + digits;
            //Check Lowercase if rule is enforced
            if (rules == PasswordRules.All || Convert.ToBoolean(rules & PasswordRules.LowerCase))
            {
                result &= (password.IndexOfAny(lower.ToCharArray()) >= 0);
            }
            //Check Uppercase if rule is enforced
            if (rules == PasswordRules.All || Convert.ToBoolean(rules & PasswordRules.UpperCase))
            {
                result &= (password.IndexOfAny(upper.ToCharArray()) >= 0);
            }
            //Check to for a digit in password if digit is required
            if (rules == PasswordRules.All || Convert.ToBoolean(rules & PasswordRules.Digit))
            {
                result &= (password.IndexOfAny(digits.ToCharArray()) >= 0);
            }
            //Check to make sure special character is included if required
            if (rules == PasswordRules.All || Convert.ToBoolean(rules & PasswordRules.SpecialChar))
            {
                result &= (password.Trim(allChars.ToCharArray()).Length > 0);
            }
            if (ruleOutList != null)
            {
                for (int i = 0; i < ruleOutList.Length; i++)
                    result &= (password != ruleOutList[i]);
            }
            return result;
        }

        public static void SetAsLoggedOut(String IPAddress, UserCredential credential)
        {
            using (VantageEntities db = new VantageEntities())
            {
                LoginHistory lh = new LoginHistory();
                lh.LoginUID = credential.LoginUID;
                lh.Type = "OUT";
                lh.IPAddress = IPAddress;
                lh.CreationDate = DateTime.Now;

                db.LoginHistory.AddObject(lh);
                db.SaveChanges();
            }
        }

        public static DataSet GetLoginHistory_LO(DateTime startDate, DateTime endDate, UserCredential credential)
        {
            startDate = startDate.Date;
            endDate = endDate.Date.AddDays(1);

            StringBuilder cmdBuilder = new StringBuilder();

            if (credential.Designation < EmployeeBL.DesignationEnum.Freelancers)
                cmdBuilder.Append("(SELECT LO.ID, LH.Type, LH.IPAddress, LH.CreationDate ");
            else
                cmdBuilder.Append("SELECT LO.ID, LH.Type, LH.IPAddress, LH.CreationDate ");

            cmdBuilder.Append("FROM LoginHistory LH ");
            cmdBuilder.Append("INNER JOIN avLogin LO ON LH.LoginUID = LO.UID ");
            cmdBuilder.Append("INNER JOIN Agent AG ON LO.BusinessUserUID = AG.UID ");
            cmdBuilder.AppendFormat("WHERE LH.CreationDate >= {0} AND LH.CreationDate < {1} ", DbHelper.GetDateString(startDate), DbHelper.GetDateString(endDate));

            if (credential.Designation < EmployeeBL.DesignationEnum.Freelancers)
            {
                string employeeUIDs = String.Empty;
                EmployeeBL.GetSubordinateEmployees_EM(credential.EmployeeUID, ref employeeUIDs);

                employeeUIDs += credential.EmployeeUID;

                cmdBuilder.AppendFormat("AND AG.EmployeeUID IN ({0})) ", employeeUIDs);

                cmdBuilder.Append("UNION ");

                string distributorUIDs = DistributorBL.GetUIDs_DI(credential);

                cmdBuilder.Append("(SELECT LO.ID, LH.Type, LH.IPAddress, LH.CreationDate ");
                cmdBuilder.Append("FROM LoginHistory LH ");
                cmdBuilder.Append("INNER JOIN avLogin LO ON LH.LoginUID = LO.UID ");
                cmdBuilder.Append("INNER JOIN Agent AG ON LO.BusinessUserUID = AG.UID ");
                cmdBuilder.AppendFormat("WHERE LH.CreationDate >= {0} AND LH.CreationDate < {1} ", DbHelper.GetDateString(startDate), DbHelper.GetDateString(endDate));
                cmdBuilder.AppendFormat("AND AG.DistributorUID IN ({0})) ", distributorUIDs);
            }

            cmdBuilder.Append("ORDER BY LH.CreationDate DESC");

            DataSet dataSet = new DbHelper().GetDataSet(cmdBuilder.ToString());

            return dataSet;
        }

        //public static DataSet GetLoginHistory(DateTime start
        #region Site Management --------------------------------------------------------

        public static DataSet GetSites_LO(UserCredential credential)
        {
            StringBuilder cmdBuilder = new StringBuilder();

            cmdBuilder.Append("SELECT SI.UID, SI.ID, SI.LogInfo, SI.LastModifiedDate, SI.VerticalVersion");
            cmdBuilder.Append(" , AG.ID AS AgentID, E.FirstName, E.LastName");
            cmdBuilder.Append(" , lo.ID AS Username");
            cmdBuilder.Append(" FROM avSite SI");
            cmdBuilder.Append(" INNER JOIN avLogin LO ON SI.LoginUID = LO.UID");
            cmdBuilder.Append(" INNER JOIN Agent AG ON LO.BusinessUserUID = AG.UID");
            cmdBuilder.Append(" LEFT OUTER JOIN Employee E ON AG.EmployeeUID = E.UID");
            cmdBuilder.AppendFormat(" WHERE SI.IsActive = 1 AND AG.mpt_DesignationEnum = {0}", (byte)EmployeeBL.DesignationEnum.SalesRep);

            if (credential.DistributorUID.HasValue)
                cmdBuilder.AppendFormat(" AND AG.DistributorUID = {0}", credential.DistributorUID.Value);
            else if (credential.Designation < EmployeeBL.DesignationEnum.Freelancers)
            {
                cmdBuilder.Append(" AND");
                string uids = DistributorBL.GetUIDs_DI(credential);
                cmdBuilder.Append(" AG.DistributorUID IN (" + uids + ")");
            }

            DataSet dataSet = new DbHelper().GetDataSet(cmdBuilder.ToString());

            DataColumn empColumn = new DataColumn("Agent");
            empColumn.Expression = "Convert(FirstName , 'System.String') + ' ' + Convert(LastName , 'System.String')";
            dataSet.Tables["t"].Columns.Add(empColumn);

            return dataSet;
        }

        //public static IQueryable GetSiteHistory(UserCredential credential)
        //{
        //    VantageDataContext db = new VantageDataContext();

        //    if (credential.DistributorUID.HasValue)
        //    {
        //        var result = from si in db.avSites
        //                     join lo in db.avLogins on si.LoginUID equals lo.UID
        //                     join ag in db.Agents on lo.BusinessUserUID equals ag.UID
        //                     join e in db.Employees on ag.EmployeeUID equals e.UID into e_join
        //                     from e in e_join.DefaultIfEmpty()
        //                     where ag.DistributorUID == credential.DistributorUID
        //                     select new
        //                     {
        //                         si.UID,
        //                         si.ID,
        //                         si.LogInfo,
        //                         si.LastModifiedDate,
        //                         si.VerticalVersion,
        //                         AgentID = ag.ID,
        //                         Agent = (((e.FirstName + " " + e.LastName) ?? "* UNASSIGNED *") + " - " + (ag.MiscData)).Trim(),
        //                         Username = lo.ID,
        //                     };

        //        return result;
        //    }
        //    else
        //    {
        //        var result = from si in db.avSites
        //                     join lo in db.avLogins on si.LoginUID equals lo.UID
        //                     join ag in db.Agents on lo.BusinessUserUID equals ag.UID
        //                     join e in db.Employees on ag.EmployeeUID equals e.UID into e_join
        //                     from e in e_join.DefaultIfEmpty()
        //                     select new
        //                     {
        //                         si.UID,
        //                         si.ID,
        //                         si.LogInfo,
        //                         si.LastModifiedDate,
        //                         si.VerticalVersion,
        //                         AgentID = ag.ID,
        //                         Agent = (((e.FirstName + " " + e.LastName) ?? "* UNASSIGNED *") + " - " + (ag.MiscData)).Trim(),
        //                         Username = lo.ID,
        //                     };

        //        return result;
        //    }
        //}

        public static void DeactivateSite_LO(int uid, UserCredential credential)
        {
            using (VantageEntities db = new VantageEntities())
            {
                avSite site = db.avSite.Single(p => p.UID == uid);

                site.IsActive = false;
                site.LastModifiedBy = credential.EmployeeID;
                site.LastModifiedDate = DateTime.Now;

                db.SaveChanges();
            }
        }

        #endregion ---------------------------------------------------------------------

        #region Sync Info --------------------------------------------------------------

        public IEnumerable<SyncWinCEClient_Result> GetMobileSyncInfo_LO()
        {
            VantageEntities db = new VantageEntities();

            return db.SyncWinCEClient();
        }

        #endregion ---------------------------------------------------------------------
    }
}
